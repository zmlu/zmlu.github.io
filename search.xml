<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES镜像制作并启动</title>
    <url>/p/10C2G1E.html</url>
    <content><![CDATA[<h1 id="拉取镜像及相关配置"><a href="#拉取镜像及相关配置" class="headerlink" title="拉取镜像及相关配置"></a>拉取镜像及相关配置</h1><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker pull elasticsearch:6.8.3<br></code></pre></td></tr></table></figure>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run --name=test_es -d -p 9200:9200 -p 9300:9300 docker.io/elasticsearch:6.8.3<br></code></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="查看容器启动情况"><a href="#查看容器启动情况" class="headerlink" title="查看容器启动情况"></a>查看容器启动情况</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker ps<br></code></pre></td></tr></table></figure>
<h2 id="如果启动成功则访问"><a href="#如果启动成功则访问" class="headerlink" title="如果启动成功则访问"></a>如果启动成功则访问</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">你的ip:9200，可以访问则可以直接启动成功，不成功则进行如下操作<br></code></pre></td></tr></table></figure>
<h1 id="服务器中配置（主机配置）"><a href="#服务器中配置（主机配置）" class="headerlink" title="服务器中配置（主机配置）"></a>服务器中配置（主机配置）</h1><h2 id="查看启动报错日志（情况1）"><a href="#查看启动报错日志（情况1）" class="headerlink" title="查看启动报错日志（情况1）"></a>查看启动报错日志（情况1）</h2><h3 id="如果报如下错误"><a href="#如果报如下错误" class="headerlink" title="如果报如下错误"></a>如果报如下错误</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[2019-10-27T14:38:59,356][INFO ][o.e.n.Node               ] [kniXCrn] starting ...<br>[2019-10-27T14:38:59,712][INFO ][o.e.t.TransportService   ] [kniXCrn] publish_address &#123;172.17.0.6:9300&#125;, bound_addresses &#123;[::]:9300&#125;<br>[2019-10-27T14:38:59,754][INFO ][o.e.b.BootstrapChecks    ] [kniXCrn] bound or publishing to a non-loopback address, enforcing bootstrap checks<br>ERROR: [1] bootstrap checks failed<br>[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<br>[2019-10-27T14:38:59,827][INFO ][o.e.n.Node               ] [kniXCrn] stopping ...<br>[2019-10-27T14:38:59,855][INFO ][o.e.n.Node <br></code></pre></td></tr></table></figure>
<p>出现此错误：ERROR: [1] bootstrap checks failed<br>则修改 /etc/sysctl.conf 配置，修改如下：</p>
<h3 id="打开配置文件-sysctl-conf"><a href="#打开配置文件-sysctl-conf" class="headerlink" title="打开配置文件 sysctl.conf"></a>打开配置文件 sysctl.conf</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /etc/sysctl.conf <br></code></pre></td></tr></table></figure>
<p>在配置文件最下面，添加如下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vm.max_map_count=655360<br></code></pre></td></tr></table></figure>
<p>修改完成后，执行此命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sysctl -p<br></code></pre></td></tr></table></figure>
<p>然后，重新启动elasticsearch，即可启动成功；</p>
<h2 id="查看启动报错日志（情况2）"><a href="#查看启动报错日志（情况2）" class="headerlink" title="查看启动报错日志（情况2）"></a>查看启动报错日志（情况2）</h2><h3 id="如果报如下错误-1"><a href="#如果报如下错误-1" class="headerlink" title="如果报如下错误"></a>如果报如下错误</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Java HotSpot(TM) 64-Bit Server VM warning: INFO:<br>os::commit_memory(0x0000000085330000, 2060255232, 0) failed;<br>error=’Cannot allocate memory’ (errno=12)<br></code></pre></td></tr></table></figure>
<p>这是由于elasticsearch:tag 默认分配 jvm 空间太大，内存不足以分配导致。<br>解决方法就是修改jvm空间分配。</p>
<h3 id="查找-jvm-options-文件"><a href="#查找-jvm-options-文件" class="headerlink" title="查找 jvm.options 文件"></a>查找 jvm.options 文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">find /var/lib/ -name jvm.options<br></code></pre></td></tr></table></figure>
<h3 id="修改查找到的-jvm-options-文件"><a href="#修改查找到的-jvm-options-文件" class="headerlink" title="修改查找到的 jvm.options 文件"></a>修改查找到的 jvm.options 文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /var/lib/docker/overlay2/1ff5019ead459b4d090b4a72e95e3cc17dc7a8432ce0051e470a3c99ac35c4a6/diff/usr/share/elasticsearch/config/jvm.options<br></code></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Xms represents the initial size of total heap space</span><br><span class="hljs-meta">#</span><span class="bash"> Xmx represents the maximum size of total heap space</span><br><br>-Xms512m<br>-Xmx512m<br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###############################################################</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># Expert settings</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###############################################################</span></span><br></code></pre></td></tr></table></figure>
<p>均改为 512m</p>
<p>保存退出，再次运行创建运行elasticsearch命令，成功启动。</p>
<h3 id="在浏览其中访问"><a href="#在浏览其中访问" class="headerlink" title="在浏览其中访问"></a>在浏览其中访问</h3><p>如果访问不了，在服务器中访问，测试一下是否启动起来了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">curl localhost:9200<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ES文件挂载</title>
    <url>/p/PW04BF.html</url>
    <content><![CDATA[<h2 id="文件挂载前准备"><a href="#文件挂载前准备" class="headerlink" title="文件挂载前准备"></a>文件挂载前准备</h2><p>进入启动的 test_es 容器中，找到配置文件所在位置，进入容器命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker exec -it test_es bash<br></code></pre></td></tr></table></figure>
<p>找到配置文件所在位置：<code>/usr/share/elasticsearch/config</code> 下，可以看的配置文件：<code>elasticsearch.yml</code></p>
<a id="more"></a>

<p>拷贝配置文件到宿主机 <code>/opt/elasticsearch/</code> 目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker cp  test_es:/usr/share/elasticsearch/config/elasticsearch.yml  /opt/elasticsearch/<br></code></pre></td></tr></table></figure>
<p>停止并且删除原来创建的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker stop test_es <br>docker rm  test_es<br></code></pre></td></tr></table></figure>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>修改 <code>/opt/elasticsearch/elasticsearch.yml</code> 配置文件</p>
<p>将 <code>transport.host: 0.0.0.0</code> 前的#去掉后保存文件退出，其作用是允许任何ip地址访问elasticsearch。<br>开发测试阶段可以这么做，生产环境下指定具体的IP在<code>elasticsearch.yml</code>配置文件中添加如下跨域访问，方便下面的可视化连接工具连接。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cluster.name: &quot;docker-cluster&quot;<br>network.host: 0.0.0.0<br><br><span class="hljs-meta">#</span><span class="bash">开启跨域访问</span><br>http.cors.enabled: true<br>http.cors.allow-origin: &quot;*&quot;<br></code></pre></td></tr></table></figure>
<h2 id="重新创建容器"><a href="#重新创建容器" class="headerlink" title="重新创建容器"></a>重新创建容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -d --name=tensquare_elasticsearch -p 9200:9200 -p 9300:9300 -v  /opt/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml elasticsearch:6.8.3<br></code></pre></td></tr></table></figure>
<h2 id="系统调优"><a href="#系统调优" class="headerlink" title="系统调优"></a>系统调优</h2><p>启动后发现启动失败了，这时什么原因呢？这与我们刚才修改的配置有关，因为 elasticsearch在启动的时候会进行一些检查，比如最多打开的文件的个数以及虚拟内存 区域数量等等，如果你放开了此配置，意味着需要打开更多的文件以及虚拟内存，所以 我们还需要系统调优。</p>
<p>一共需要修改两处</p>
<h3 id="修改-etc-security-limits-conf"><a href="#修改-etc-security-limits-conf" class="headerlink" title="修改 /etc/security/limits.conf"></a>修改 /etc/security/limits.conf</h3><p>添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">* soft nofile 65536 <br>* hard nofile 65536<br></code></pre></td></tr></table></figure>
<p>nofile是单个进程允许打开的最大文件个数<br>soft nofile 是软限制<br>hard nofile是硬限制</p>
<h3 id="修改-etc-sysctl-conf"><a href="#修改-etc-sysctl-conf" class="headerlink" title="修改 /etc/sysctl.conf"></a>修改 /etc/sysctl.conf</h3><p>添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vm.max_map_count=655360<br></code></pre></td></tr></table></figure>
<p>限制一个进程可以拥有的VMA(虚拟内存区域)的数量；执行下面命令 修改内核参数马上生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sysctl -p<br></code></pre></td></tr></table></figure>
<p>重新启动虚拟机，再次启动容器，发现已经可以启动并远程访问</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>Elasticsearch</category>
      </categories>
  </entry>
  <entry>
    <title>HomeKit初始化</title>
    <url>/p/3XS9TP7.html</url>
    <content><![CDATA[<p>前段时间搬家，需要插排，买了个米家的只能插排，感觉用手机控制很方便。看到苹果有自己的Home App来管理智能家居，想试试米家的智能设备能不能接入苹果的HomeKit。首先需要先搭建一个HomeKit服务器。</p>
<a id="more"></a>

<h1 id="安装Node-js和npm"><a href="#安装Node-js和npm" class="headerlink" title="安装Node.js和npm"></a>安装Node.js和npm</h1><p>Node.js v10.x:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Using Ubuntu</span><br>curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -<br>sudo apt-get install -y nodejs<br><br><span class="hljs-meta">#</span><span class="bash"> Using Debian, as root</span><br>curl -sL https://deb.nodesource.com/setup_10.x | bash -<br>apt-get install -y nodejs<br></code></pre></td></tr></table></figure>
<h1 id="安装编译组件"><a href="#安装编译组件" class="headerlink" title="安装编译组件"></a>安装编译组件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get install libavahi-compat-libdnssd-dev<br>sudo apt-get install build-essential libtool<br></code></pre></td></tr></table></figure>
<h1 id="安装HomeBridge"><a href="#安装HomeBridge" class="headerlink" title="安装HomeBridge"></a>安装HomeBridge</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo npm install -g --unsafe-perm homebridge<br></code></pre></td></tr></table></figure>
<h1 id="添加HomeBridge配置文件"><a href="#添加HomeBridge配置文件" class="headerlink" title="添加HomeBridge配置文件"></a>添加HomeBridge配置文件</h1><p>进入目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd ~/.homebridge/<br></code></pre></td></tr></table></figure>
<p>创建文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim config.json<br></code></pre></td></tr></table></figure>
<p>添加：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;bridge&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Homebridge&quot;</span>,<br>        <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;CC:22:3D:E3:CE:30&quot;</span>,<br>        <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">51826</span>,<br>        <span class="hljs-attr">&quot;pin&quot;</span>: <span class="hljs-string">&quot;031-45-154&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>保存并退出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wq!<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
        <category>HomeKit</category>
      </categories>
      <tags>
        <tag>HomeKit</tag>
        <tag>米家</tag>
      </tags>
  </entry>
  <entry>
    <title>HomeKit添加米家智能插线板</title>
    <url>/p/141WYMG.html</url>
    <content><![CDATA[<p>之前搭建了个HomeKit服务器，还没有接入米家的插线板，现在试试能不能让米家设备接入苹果的HomeKit，用手机的Home软件就能控制米家插线板。</p>
<a id="more"></a>

<h1 id="安装homebridge-mi-outlet插件"><a href="#安装homebridge-mi-outlet插件" class="headerlink" title="安装homebridge-mi-outlet插件"></a>安装<code>homebridge-mi-outlet</code>插件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo npm -g install homebridge-mi-outlet<br></code></pre></td></tr></table></figure>
<h1 id="安装miio插件"><a href="#安装miio插件" class="headerlink" title="安装miio插件"></a>安装<code>miio</code>插件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo npm -g install miio<br></code></pre></td></tr></table></figure>
<h1 id="用miio插件发现小米智能插线板"><a href="#用miio插件发现小米智能插线板" class="headerlink" title="用miio插件发现小米智能插线板"></a>用<code>miio</code>插件发现小米智能插线板</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">miio discover<br></code></pre></td></tr></table></figure>
<p>可以看到<code>Model info：zhimi.powerstrip.v2</code>就是米家智能插线板，将下放的Address和Token记下来：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Address：192.168.xxx.xxx<br>Token：21a98556732d471e2764cxxxxxxb1ee1<br></code></pre></td></tr></table></figure>
<h1 id="修改HomeBridge的config-json文件"><a href="#修改HomeBridge的config-json文件" class="headerlink" title="修改HomeBridge的config.json文件"></a>修改HomeBridge的<code>config.json</code>文件</h1><p>在<code>bridge</code>节点后面添加所需的<code>platforms</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;platforms&quot;</span>: [&#123;<br>        <span class="hljs-attr">&quot;platform&quot;</span>: <span class="hljs-string">&quot;MiOutletPlatform&quot;</span>,<br>            <span class="hljs-attr">&quot;deviceCfgs&quot;</span>: [&#123;<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;MiPlugBase&quot;</span>,<br>                <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;xxx.xxx.xxx.xxx&quot;</span>,<br>                <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,<br>                <span class="hljs-attr">&quot;outletName&quot;</span>: <span class="hljs-string">&quot;米家智能插座基础版&quot;</span>,<br>                <span class="hljs-attr">&quot;outletDisable&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;temperatureName&quot;</span>: <span class="hljs-string">&quot;米家智能插座基础版温度&quot;</span>,<br>                <span class="hljs-attr">&quot;temperatureDisable&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;switchLEDName&quot;</span>: <span class="hljs-string">&quot;米家智能插座基础版指示灯开关&quot;</span>,<br>                <span class="hljs-attr">&quot;switchLEDDisable&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;, &#123;<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;MiPlugBaseWithUSB&quot;</span>,<br>                <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;xxx.xxx.xxx.xxx&quot;</span>,<br>                <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,<br>                <span class="hljs-attr">&quot;outletName&quot;</span>: <span class="hljs-string">&quot;米家智能插座USB版&quot;</span>,<br>                <span class="hljs-attr">&quot;outletDisable&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;temperatureName&quot;</span>: <span class="hljs-string">&quot;米家智能插座USB版温度&quot;</span>,<br>                <span class="hljs-attr">&quot;temperatureDisable&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;switchUSBName&quot;</span>: <span class="hljs-string">&quot;米家智能插座USB版指示灯开关&quot;</span>,<br>                <span class="hljs-attr">&quot;switchUSBDisable&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;, &#123;<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;MiIntelligencePinboard&quot;</span>,<br>                <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;xxx.xxx.xxx.xxx&quot;</span>,<br>                <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,<br>                <span class="hljs-attr">&quot;outletName&quot;</span>: <span class="hljs-string">&quot;米家智能插线板&quot;</span>,<br>                <span class="hljs-attr">&quot;outletDisable&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;temperatureName&quot;</span>: <span class="hljs-string">&quot;米家智能插线板温度&quot;</span>,<br>                <span class="hljs-attr">&quot;temperatureDisable&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;switchLEDName&quot;</span>: <span class="hljs-string">&quot;米家智能插线板指示灯开关&quot;</span>,<br>                <span class="hljs-attr">&quot;switchLEDDisable&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;, &#123;<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;MiQingPinboard&quot;</span>,<br>                <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;xxx.xxx.xxx.xxx&quot;</span>,<br>                <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,<br>                <span class="hljs-attr">&quot;outletName&quot;</span>: <span class="hljs-string">&quot;青米智能插线板五孔位版&quot;</span>,<br>                <span class="hljs-attr">&quot;outletDisable&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;temperatureName&quot;</span>: <span class="hljs-string">&quot;青米智能插线板五孔位版温度&quot;</span>,<br>                <span class="hljs-attr">&quot;temperatureDisable&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;, &#123;<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;MiQingPinboardWithUSB&quot;</span>,<br>                <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;xxx.xxx.xxx.xxx&quot;</span>,<br>                <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>,<br>                <span class="hljs-attr">&quot;outletName&quot;</span>: <span class="hljs-string">&quot;青米智能插线板USB版&quot;</span>,<br>                <span class="hljs-attr">&quot;outletDisable&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;temperatureName&quot;</span>: <span class="hljs-string">&quot;青米智能插线板USB版温度&quot;</span>,<br>                <span class="hljs-attr">&quot;temperatureDisable&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;]<br>    &#125;]<br>&#125;<br></code></pre></td></tr></table></figure>
<p>其中<code>type</code>代表的硬件：</p>
<ul>
<li>米家智能插座基础版: <code>MiPlugBase</code></li>
<li>米家智能插座USB版: <code>MiPlugBaseWithUSB</code></li>
<li>米家智能插线板: <code>MiIntelligencePinboard</code></li>
<li>青米智能插线板五孔位版: <code>MiQingPinboard</code></li>
<li>青米智能插线板USB版: <code>MiQingPinboardWithUSB</code></li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>HomeKit</category>
      </categories>
      <tags>
        <tag>HomeKit</tag>
        <tag>米家</tag>
      </tags>
  </entry>
  <entry>
    <title>gitignore文件不起作用</title>
    <url>/p/TSMFKX.html</url>
    <content><![CDATA[<p>.gitignore中已经标明忽略的文件目录下的文件，git push的时候还会出现在push的目录中，原因是因为在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的。</p>
<p>这时候我们就应该先把本地缓存删除，然后再进行git的push，这样就不会出现忽略的文件了。git清除本地缓存命令如下：</p>
<a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git rm -r --cached .<br>git add .<br>git commit -m &#x27;update .gitignore&#x27;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>Git设置代理</title>
    <url>/p/35NJX8Y.html</url>
    <content><![CDATA[<p>git下载克隆github的速度在国内很慢，我们可以通过代理的方式加速</p>
<h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><h2 id="socks5"><a href="#socks5" class="headerlink" title="socks5"></a>socks5</h2><a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git config --global http.proxy socks5://127.0.0.1:1080<br>git config --global https.proxy socks5://127.0.0.1:1080<br></code></pre></td></tr></table></figure>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git config --global https.proxy http://127.0.0.1:1087<br>git config --global https.proxy http://127.0.0.1:1087<br></code></pre></td></tr></table></figure>
<h1 id="查看全局-config"><a href="#查看全局-config" class="headerlink" title="查看全局 config"></a>查看全局 config</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cat ~/.gitconfig<br></code></pre></td></tr></table></figure>
<p>显示如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[http]<br>	postBuffer = 524288000<br>	proxy = socks5://127.0.0.1:1086<br>[https]<br>	proxy = socks5://127.0.0.1:1086<br></code></pre></td></tr></table></figure>
<h1 id="停用代理"><a href="#停用代理" class="headerlink" title="停用代理"></a>停用代理</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git config --global --unset http.proxy<br>git config --global --unset https.proxy<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>加速</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Gulp加速Hexo</title>
    <url>/p/8VNSFG.html</url>
    <content><![CDATA[<p>使用Gulp工具来压缩Hexo生成的public文件，可以通过压缩css、js、html文件来提升网站的访问速度，不过查了网上的一些方法，按照做发现了许多坑。比如gulp和babel版本问题、gulpfile.js文件编写问题。通过一下午的尝试，总结出了一套可行的安装方法。</p>
<h1 id="安装Gulp到Hexo博客"><a href="#安装Gulp到Hexo博客" class="headerlink" title="安装Gulp到Hexo博客"></a>安装Gulp到Hexo博客</h1><p>参见文章：<a href="https://zmlu.github.io/p/14JCGNP.html">安装Gulp</a></p>
<p>进入hexo博客的根目录（public文件夹所在的目录），安装一些必要的组件。</p>
<a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install --save-dev gulp gulp-babel gulp-clean-css gulp-htmlclean gulp-htmlmin gulp-uglify @babel/core @babel/preset-env @babel/register<br></code></pre></td></tr></table></figure>
<h1 id="新建-babelrc"><a href="#新建-babelrc" class="headerlink" title="新建.babelrc"></a>新建.babelrc</h1><p>依然在hexo博客根目录下新建.babelrc文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [ <span class="hljs-string">&quot;@babel/preset-env&quot;</span> ]<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="新建gulpfile-js"><a href="#新建gulpfile-js" class="headerlink" title="新建gulpfile.js"></a>新建gulpfile.js</h1><p>在hexo博客根目录下新建gulpfile.js文件，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-babel&#x27;</span>);<br><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-uglify&#x27;</span>);<br><span class="hljs-keyword">var</span> cleanCSS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-clean-css&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlmin&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlclean = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlclean&#x27;</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * css</span><br><span class="hljs-comment"> */</span><br>gulp.task(<span class="hljs-string">&#x27;minify-css&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>	<span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/**/*.css&#x27;</span>)<br>			.pipe(cleanCSS())<br>			.pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><br>gulp.task(<span class="hljs-string">&#x27;minify-js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>	<span class="hljs-keyword">return</span> gulp.src([<span class="hljs-string">&#x27;./public/**/*.js&#x27;</span>, <span class="hljs-string">&#x27;!./public/**/*.min.js&#x27;</span>])<br>			.pipe(babel())<br>			.pipe(uglify())<br>			.pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><br>gulp.task(<span class="hljs-string">&#x27;minify-html&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>	<span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/**/*.html&#x27;</span>)<br>			.pipe(htmlclean())<br>			.pipe(htmlmin(&#123;<br>				removeComments: <span class="hljs-literal">true</span>,<br>				minifyJS: <span class="hljs-literal">true</span>,<br>				minifyCSS: <span class="hljs-literal">true</span>,<br>				minifyURLs: <span class="hljs-literal">true</span>,<br>			&#125;))<br>			.pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><br>gulp.task(<span class="hljs-string">&#x27;default&#x27;</span>,gulp.parallel(<span class="hljs-string">&#x27;minify-html&#x27;</span>, <span class="hljs-string">&#x27;minify-css&#x27;</span>, <span class="hljs-string">&#x27;minify-js&#x27;</span>));<br></code></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>执行完<code>hexo g</code>产生编译文件后，再手动执行执行<code>gulp</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[15:03:44] Using gulpfile E:\dev\hexoBlog\gulpfile.js<br>[15:03:44] Starting &#x27;default&#x27;...<br>[15:03:44] Starting &#x27;minify-html&#x27;...<br>[15:03:44] Starting &#x27;minify-css&#x27;...<br>[15:03:44] Starting &#x27;minify-js&#x27;...<br>[15:03:47] Finished &#x27;minify-css&#x27; after 3.52 s<br>[15:03:48] Finished &#x27;minify-html&#x27; after 4.62 s<br>[15:03:48] Finished &#x27;minify-js&#x27; after 4.62 s<br>[15:03:48] Finished &#x27;default&#x27; after 4.63 s<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Gulp</tag>
        <tag>Hexo</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Gulp</title>
    <url>/p/14JCGNP.html</url>
    <content><![CDATA[<p>记录一下安装Gulp的过程，参考官方文档，参考地址见文章末尾。</p>
<p>如果你先前将gulp安装到全局环境中了，请执行<code>npm rm --global gulp</code>将<code>gulp</code>删除再继续以下操作。更多信息请参考<a href="https://medium.com/gulpjs/gulp-sips-command-line-interface-e53411d4467">Sip</a>。</p>
<a id="more"></a>

<h1 id="检查-node、npm-和-npx-是否正确安装"><a href="#检查-node、npm-和-npx-是否正确安装" class="headerlink" title="检查 node、npm 和 npx 是否正确安装"></a>检查 node、npm 和 npx 是否正确安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">node --version<br></code></pre></td></tr></table></figure>
<p><img src="https://gulpjs.com/img/docs-node-version-command.png" alt="Output:v8.11.1"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm --version<br></code></pre></td></tr></table></figure>
<p><img src="https://gulpjs.com/img/docs-npm-version-command.png" alt="Output:5.6.0"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npx --version<br></code></pre></td></tr></table></figure>
<p><img src="https://gulpjs.com/img/docs-npx-version-command.png" alt="Output:9.7.1"></p>
<p>如果上述工具还没安装，请参考<a href="https://nodejs.org/en/">这里</a>。</p>
<h1 id="安装-gulp-命令行工具"><a href="#安装-gulp-命令行工具" class="headerlink" title="安装 gulp 命令行工具"></a>安装 gulp 命令行工具</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install --global gulp-cli<br></code></pre></td></tr></table></figure>
<h1 id="创建项目目录并进入"><a href="#创建项目目录并进入" class="headerlink" title="创建项目目录并进入"></a>创建项目目录并进入</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npx mkdirp my-project<br>cd my-project<br></code></pre></td></tr></table></figure>
<h1 id="在项目目录下创建-package-json-文件"><a href="#在项目目录下创建-package-json-文件" class="headerlink" title="在项目目录下创建 package.json 文件"></a>在项目目录下创建 package.json 文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm init<br></code></pre></td></tr></table></figure>
<p>上述命令将指引你设置项目名、版本、描述信息等。</p>
<h1 id="安装-gulp，作为开发时依赖项"><a href="#安装-gulp，作为开发时依赖项" class="headerlink" title="安装 gulp，作为开发时依赖项"></a>安装 gulp，作为开发时依赖项</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install --save-dev gulp<br></code></pre></td></tr></table></figure>
<h1 id="检查-gulp-版本"><a href="#检查-gulp-版本" class="headerlink" title="检查 gulp 版本"></a>检查 gulp 版本</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">gulp --version<br></code></pre></td></tr></table></figure>
<p>确保输出与下面的屏幕截图匹配，否则你可能需要执行本指南中的上述步骤。</p>
<p><img src="https://gulpjs.com/img/docs-gulp-version-command.png" alt="Output: CLI version 2.0.1 &amp; Local version 4.0.0"></p>
<h1 id="创建-gulpfile-文件"><a href="#创建-gulpfile-文件" class="headerlink" title="创建 gulpfile 文件"></a>创建 gulpfile 文件</h1><p>利用任何文本编辑器在项目大的根目录下创建一个名为 gulpfile.js 的文件，并在文件中输入以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defaultTask</span>(<span class="hljs-params">cb</span>) </span>&#123;<br>  <span class="hljs-comment">// place code for your default task here</span><br>  cb();<br>&#125;<br><br><span class="hljs-built_in">exports</span>.default = defaultTask<br></code></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在项目根目录下执行 gulp 命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">gulp<br></code></pre></td></tr></table></figure>
<p>如需运行多个任务（task），可以执行<code>gulp &lt;task&gt; &lt;othertask&gt;</code>。</p>
<h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><p>默认任务（task）将执行，因为任务为空，因此没有实际动作。</p>
<p><img src="https://gulpjs.com/img/docs-gulp-command.png" alt="Output:Starting default &amp; Finished default"></p>
<blockquote>
<p>参考： <a href="https://gulpjs.com/docs/en/getting-started/quick-start">Gulp Quick Start</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发</category>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP基本语法记录01</title>
    <url>/p/3AB4DA.html</url>
    <content><![CDATA[<p>最近项目上需要改老项目，巩固一下JSP方面的语法知识。</p>
<a id="more"></a>

<h1 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h1><p>JSP注释用于注释在程序开发过程中的开发提示，不会输出到浏览器端。<br>JSP注释的语法格式如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%--JSP注释 --%&gt;<br></code></pre></td></tr></table></figure>
<p>与JSP注释相似的是HTML注释，HTML注释的语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- HTML注释 --&gt;</span><br></code></pre></td></tr></table></figure>
<p>HTML注释的内容会输出到浏览器端，在浏览器端查看网页源代码可以看到HTML注释的内容，而JSP注释的内容则查看不到。<br>下面是JSP注释和HTML注释的代码示例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span><br>    pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>&lt;title&gt;JSP注释示例&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    注释示例<br>    &lt;!-- 增加JSP注释 --&gt;<br>    &lt;%--JSP注释 --%&gt;<br>    &lt;!-- 增加html注释 --&gt;<br>    &lt;!-- html注释 --&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>
<p>通过在浏览器端查看网页源代码可以看到html注释的内容可以看到，而JSP注释的内容则查看不到。如下图所示。</p>
<p><img src="https://file.moetu.org/images/2019/12/31/annotation8f234306e8e6514f.png" alt="annotation.png"></p>
<h1 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h1><p>JSP声明用于声明变量和方法。JSP声明的语法格式如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%!  JSP声明部分  %&gt;<br></code></pre></td></tr></table></figure>
<p>下面看一个JSP声明的实例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span><br>    pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>&lt;title&gt;JSP声明示例&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;%--下面是JSP声明部分 --%&gt;<br>&lt;%!<br>    <span class="hljs-comment">//声明一个整型变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> count;<br>    <span class="hljs-comment">//声明一个方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">info</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>%&gt;<br>&lt;body&gt;<br>    &lt;%<br>        <span class="hljs-comment">//输出count的值，然后再将count加1</span><br>        out.println(count++);<br>    %&gt;<br>    &lt;br/&gt;<br>    &lt;%<br>        <span class="hljs-comment">//输出info()方法的返回值</span><br>        out.println(info());<br>    %&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>
<p>在浏览器中测试该页面，可以看到正常输出了count 的值和info()方法的返回值，每次刷新页面，count的值就会加1。页面效果图如下（刷新许多次）：</p>
<p><img src="https://file.moetu.org/images/2019/12/31/declare1ab0df224e6dad3d.png" alt="declare.png"></p>
<h1 id="输出JSP表达式"><a href="#输出JSP表达式" class="headerlink" title="输出JSP表达式"></a>输出JSP表达式</h1><p>输出JSP表达式的语法格式如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%=表达式%&gt;<br></code></pre></td></tr></table></figure>
<p>下面是用表达式改写JSP声明的示例的页面代码，使用JSP表达式输出同样能达到上面的效果，代码如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span><br>    pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>&lt;title&gt;JSP表达式示例&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;%--下面是JSP声明部分 --%&gt;<br>&lt;%!<br>    <span class="hljs-comment">//声明一个整型变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> count;<br>    <span class="hljs-comment">//声明一个方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">info</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>%&gt;<br>&lt;body&gt;<br>    &lt;!-- 使用表达式输出变量的值 --&gt;<br>    &lt;%=count++%&gt;<br>    &lt;br/&gt;<br>    &lt;!-- 使用表达式输出方法的返回值 --&gt;<br>    &lt;%=info()%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>
<p>页面效果如下：</p>
<p><img src="https://file.moetu.org/images/2019/12/31/expression94586bd6a2b9a018.png" alt="expression.png"></p>
<h1 id="JSP脚本"><a href="#JSP脚本" class="headerlink" title="JSP脚本"></a>JSP脚本</h1><p>JSP脚本是使用Java代码执行页面的控制，JSP脚本的语法格式如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%  脚本语言代码 %&gt;<br></code></pre></td></tr></table></figure>
<p>下面是一个使用Java脚本语言控制HTML中表格的示例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span><br>    pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>&lt;title&gt;脚本测试&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;table border=<span class="hljs-string">&quot;1px&quot;</span> cellspacing=<span class="hljs-string">&quot;0px&quot;</span> style=<span class="hljs-string">&quot;border-collapse:collapse&quot;</span> width=<span class="hljs-string">&quot;300px&quot;</span>&gt;<br>    &lt;!-- Java脚本 --&gt;<br>    &lt;%<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) <br>    &#123;<br>    %&gt;<br>        &lt;!-- 上面的循环控制&lt;tr&gt;标签循环 --&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;循环值：&lt;/td&gt;<br>            &lt;td&gt;&lt;%=i %&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;%&#125; %&gt;<br>    &lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>
<p>页面的效果如下图所示：</p>
<p><img src="https://file.moetu.org/images/2019/12/31/scripte85aac144f3530f4.png" alt="script.png"></p>
<p>上面就是JSP的四种基本语法，详细理解 这四种语法还需要有Servlet的知识，如JSP声明变量和方法，JSP声明的变量和方法会在该JSP页面对应的Servlet中有对应的声明，不是独立存在的，因为在Java中方法是不能独立存在的，方法的声明需要在类中声明。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>理解 JavaScript 的 async、await</title>
    <url>/p/3Q3X94C.html</url>
    <content><![CDATA[<p>任意一个名称都是有意义的，先从字面意思来理解。async 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</p>
<a id="more"></a>

<h1 id="async-和-await-在干什么"><a href="#async-和-await-在干什么" class="headerlink" title="async 和 await 在干什么"></a>async 和 await 在干什么</h1><p>另外还有一个很有意思的语法规定，await 只能出现在 async 函数中。然后细心的朋友会产生一个疑问，如果 await 只能出现在 async 函数中，那这个 async 函数应该怎么调用？<br>如果需要通过 await 来调用一个 async 函数，那这个调用的外面必须得再包一个 async 函数，然后……进入死循环，永无出头之日……<br>如果 async 函数不需要 await 来调用，那 async 到底起个啥作用？</p>
<h2 id="async-起什么作用"><a href="#async-起什么作用" class="headerlink" title="async 起什么作用"></a>async 起什么作用</h2><p>这个问题的关键在于，async 函数是怎么处理它的返回值的！<br>我们当然希望它能直接通过 return 语句返回我们想要的值，但是如果真是这样，似乎就没 await 什么事了。所以，写段代码来试试，看它到底会返回什么：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello async&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> result = testAsync();<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure>
<p>看到输出就恍然大悟了——输出的是一个 Promise 对象。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">c:\var\test&gt; node --harmony_async_await .<br>Promise &#123; &#x27;hello async&#x27; &#125;<br></code></pre></td></tr></table></figure>
<p>所以，<code>async</code> 函数返回的是一个 Promise 对象。从文档中也可以得到这个信息。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 <code>return</code> 一个直接量，async 会把这个直接量通过 <code>Promise.resolve()</code> 封装成 Promise 对象。</p>
<p>async 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，我们当然应该用原来的方式：<code>then()</code> 链来处理这个 Promise 对象，就像这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">testAsync().then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(v);    <span class="hljs-comment">// 输出 hello async</span><br>&#125;);<br></code></pre></td></tr></table></figure>
<p>现在回过头来想下，如果 async 函数没有返回值，又该如何？很容易想到，它会返回<code>Promise.resolve(undefined)</code>。</p>
<p>联想一下 Promise 的特点——无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。</p>
<p>那么下一个关键点就在于 await 关键字了。</p>
<h2 id="await-到底在等啥"><a href="#await-到底在等啥" class="headerlink" title="await 到底在等啥"></a>await 到底在等啥</h2><p>一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。</p>
<p>因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSomething</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;something&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;hello async&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> v1 = <span class="hljs-keyword">await</span> getSomething();<br>    <span class="hljs-keyword">const</span> v2 = <span class="hljs-keyword">await</span> testAsync();<br>    <span class="hljs-built_in">console</span>.log(v1, v2);<br>&#125;<br><br>test();<br></code></pre></td></tr></table></figure>
<h2 id="await-等到了要等的，然后呢"><a href="#await-等到了要等的，然后呢" class="headerlink" title="await 等到了要等的，然后呢"></a>await 等到了要等的，然后呢</h2><p>await 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，await 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。</p>
<p>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</p>
<p>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</p>
<blockquote>
<p>看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。</p>
</blockquote>
<h1 id="async-await-帮我们干了啥"><a href="#async-await-帮我们干了啥" class="headerlink" title="async/await 帮我们干了啥"></a>async/await 帮我们干了啥</h1><h2 id="作个简单的比较"><a href="#作个简单的比较" class="headerlink" title="作个简单的比较"></a>作个简单的比较</h2><p>上面已经说明了 async 会将其后的函数（函数表达式或 Lambda）的返回值封装成一个 Promise 对象，而 await 会等待这个 Promise 完成，并将其 resolve 的结果返回出来。</p>
<p>现在举例，用 <code>setTimeout</code> 模拟耗时的异步操作，先来看看不用 async/await 会怎么写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">takeLongTime</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> resolve(<span class="hljs-string">&quot;long_time_value&quot;</span>), <span class="hljs-number">1000</span>);<br>    &#125;);<br>&#125;<br><br>takeLongTime().then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;got&quot;</span>, v);<br>&#125;);<br></code></pre></td></tr></table></figure>
<p>如果改用 async/await 呢，会是这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">takeLongTime</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> resolve(<span class="hljs-string">&quot;long_time_value&quot;</span>), <span class="hljs-number">1000</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> v = <span class="hljs-keyword">await</span> takeLongTime();<br>    <span class="hljs-built_in">console</span>.log(v);<br>&#125;<br><br>test();<br></code></pre></td></tr></table></figure>
<p>眼尖的同学已经发现 <code>takeLongTime()</code> 没有申明为 <code>async</code>。实际上，<code>takeLongTime()</code> 本身就是返回的 Promise 对象，加不加 <code>async</code> 结果都一样，如果没明白，请回过头再去看看上面的“async 起什么作用”。</p>
<p>又一个疑问产生了，这两段代码，两种方式对异步调用的处理（实际就是对 Promise 对象的处理）差别并不明显，甚至使用 async/await 还需要多写一些代码，那它的优势到底在哪？</p>
<h2 id="async-await-的优势在于处理-then-链"><a href="#async-await-的优势在于处理-then-链" class="headerlink" title="async/await 的优势在于处理 then 链"></a>async/await 的优势在于处理 then 链</h2><p>单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。</p>
<p>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。我们仍然用 <code>setTimeout</code> 来模拟异步操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 传入参数 n，表示这个函数执行的时间（毫秒）</span><br><span class="hljs-comment"> * 执行的结果是 n + 200，这个值将用于下一步骤</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">takeLongTime</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> resolve(n + <span class="hljs-number">200</span>), n);<br>    &#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step1</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step1 with <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step2</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step2 with <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step3</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step3 with <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(n);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>现在用 Promise 方式来实现这三个步骤的处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doIt</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;doIt&quot;</span>);<br>    <span class="hljs-keyword">const</span> time1 = <span class="hljs-number">300</span>;<br>    step1(time1)<br>        .then(<span class="hljs-function"><span class="hljs-params">time2</span> =&gt;</span> step2(time2))<br>        .then(<span class="hljs-function"><span class="hljs-params">time3</span> =&gt;</span> step3(time3))<br>        .then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`result is <span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>            <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;doIt&quot;</span>);<br>        &#125;);<br>&#125;<br><br>doIt();<br><br><span class="hljs-comment">// c:\var\test&gt;node --harmony_async_await .</span><br><span class="hljs-comment">// step1 with 300</span><br><span class="hljs-comment">// step2 with 500</span><br><span class="hljs-comment">// step3 with 700</span><br><span class="hljs-comment">// result is 900</span><br><span class="hljs-comment">// doIt: 1507.251ms</span><br></code></pre></td></tr></table></figure>
<p>输出结果 <code>result</code> 是 <code>step3()</code> 的参数 <code>700 + 200 = 900</code>。<code>doIt()</code> 顺序执行了三个步骤，一共用了 <code>300 + 500 + 700 = 1500</code> 毫秒，和 <code>console.time()/console.timeEnd()</code> 计算的结果一致。<br>如果用 async/await 来实现呢，会是这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doIt</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;doIt&quot;</span>);<br>    <span class="hljs-keyword">const</span> time1 = <span class="hljs-number">300</span>;<br>    <span class="hljs-keyword">const</span> time2 = <span class="hljs-keyword">await</span> step1(time1);<br>    <span class="hljs-keyword">const</span> time3 = <span class="hljs-keyword">await</span> step2(time2);<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> step3(time3);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`result is <span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;doIt&quot;</span>);<br>&#125;<br><br>doIt();<br></code></pre></td></tr></table></figure>
<p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>
<h2 id="还有更酷的"><a href="#还有更酷的" class="headerlink" title="还有更酷的"></a>还有更酷的</h2><p>现在把业务要求改一下，仍然是三个步骤，但每一个步骤都需要之前每个步骤的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step1</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step1 with <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step2</span>(<span class="hljs-params">m, n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step2 with <span class="hljs-subst">$&#123;m&#125;</span> and <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(m + n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step3</span>(<span class="hljs-params">k, m, n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step3 with <span class="hljs-subst">$&#123;k&#125;</span>, <span class="hljs-subst">$&#123;m&#125;</span> and <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(k + m + n);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这回先用 async/await 来写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doIt</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;doIt&quot;</span>);<br>    <span class="hljs-keyword">const</span> time1 = <span class="hljs-number">300</span>;<br>    <span class="hljs-keyword">const</span> time2 = <span class="hljs-keyword">await</span> step1(time1);<br>    <span class="hljs-keyword">const</span> time3 = <span class="hljs-keyword">await</span> step2(time1, time2);<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> step3(time1, time2, time3);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`result is <span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;doIt&quot;</span>);<br>&#125;<br><br>doIt();<br><br><span class="hljs-comment">// c:\var\test&gt;node --harmony_async_await .</span><br><span class="hljs-comment">// step1 with 300</span><br><span class="hljs-comment">// step2 with 800 = 300 + 500</span><br><span class="hljs-comment">// step3 with 1800 = 300 + 500 + 1000</span><br><span class="hljs-comment">// result is 2000</span><br><span class="hljs-comment">// doIt: 2907.387ms</span><br></code></pre></td></tr></table></figure>
<p>除了觉得执行时间变长了之外，似乎和之前的示例没啥区别啊！别急，认真想想如果把它写成 Promise 方式实现会是什么样子？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doIt</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;doIt&quot;</span>);<br>    <span class="hljs-keyword">const</span> time1 = <span class="hljs-number">300</span>;<br>    step1(time1)<br>        .then(<span class="hljs-function"><span class="hljs-params">time2</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> step2(time1, time2)<br>                .then(<span class="hljs-function"><span class="hljs-params">time3</span> =&gt;</span> [time1, time2, time3]);<br>        &#125;)<br>        .then(<span class="hljs-function"><span class="hljs-params">times</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> [time1, time2, time3] = times;<br>            <span class="hljs-keyword">return</span> step3(time1, time2, time3);<br>        &#125;)<br>        .then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`result is <span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>            <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;doIt&quot;</span>);<br>        &#125;);<br>&#125;<br><br>doIt();<br></code></pre></td></tr></table></figure>
<p>有没有感觉有点复杂的样子？那一堆参数处理，就是 Promise 方案的死穴—— 参数传递太麻烦了，看着就晕！</p>
<blockquote>
<p>参考：<a href="https://segmentfault.com/a/1190000007535316">理解 JavaScript 的 async/await - 边城</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx+Lua+libwebp实现服务器图片自动转WebP</title>
    <url>/p/2JJ2AE2.html</url>
    <content><![CDATA[<p>服务器的流量和加载速度一直是优化的重点，既能保证图片的清晰，又能节省流量、提高加载速度才是一个优秀网页需要达到的目标。</p>
<p>Google推出了一种图片格式: WebP (<a href="https://developers.google.com/speed/webp/">Google官方网址</a>)，比同类图片压缩率更高，相同画质下，文件的体积更小40%。而且主流浏览器的支持率已经达到80%</p>
<a id="more"></a>

<p><a href="https://caniuse.com/#feat=webp">查看支持率</a></p>
<p><img src="https://file.moetu.org/images/2020/01/06/webp805caf2e553e4f3ad1.jpg" alt="WebP支持率"></p>
<p>原图加载截图：（12.61s）</p>
<p><img src="https://file.moetu.org/images/2020/01/06/Chrome--d61d7c79a27fca39.jpg" alt="Chrome 原图 加载"></p>
<p>WebP加载截图：（4.72s）</p>
<p><img src="https://file.moetu.org/images/2020/01/06/Chrome-Webp-7a40425fcab83529.jpg" alt="Chrome Webp 加载"></p>
<p>可以看出加载Webp会大大提高加载速度</p>
<h2 id="Nginx安装Lua模块"><a href="#Nginx安装Lua模块" class="headerlink" title="Nginx安装Lua模块"></a>Nginx安装Lua模块</h2><p>略</p>
<h2 id="服务器安装libwebp"><a href="#服务器安装libwebp" class="headerlink" title="服务器安装libwebp"></a>服务器安装libwebp</h2><p>libwebp是图片转成webp的工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install libwebp-tools<br></code></pre></td></tr></table></figure>
<p>测试:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cwebp -q 100 1.jpg -o 1.webp<br></code></pre></td></tr></table></figure>
<p><img src="https://file.moetu.org/images/2020/01/06/libwebpd4b8956ec9f0cc80.jpg" alt="测试libwebp安装"></p>
<p>如果出现以上信息，说明安装成功。</p>
<h2 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h2><p>配置：</p>
<p>让<code>.png.webp</code>、<code>.jpg.webp</code>、<code>.gif.webp</code>的请求执行转WebP的lua文件。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">location /img &#123;<br>    expires               365d;<br>    autoindex             on;<br>    autoindex_exact_size  on;<br>    try_files             $uri $uri/ @webp;<br>&#125;<br>    <br>location @webp &#123;    <br>    if ($uri ~ \.(png|jpg|gif)\.webp) &#123;<br>        content_by_lua_file  lua/imgProcess.lua;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="https://file.moetu.org/images/2020/01/06/nginxwebplua03e80bf8dc3f9b85.jpg" alt="Nginx-Lua配置WebP转换"></p>
<h2 id="imgProcess-lua"><a href="#imgProcess-lua" class="headerlink" title="imgProcess.lua"></a>imgProcess.lua</h2><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_exists</span><span class="hljs-params">(name)</span></span> <span class="hljs-comment">--判断文件是否存在的方法</span><br>    <span class="hljs-keyword">local</span> f=<span class="hljs-built_in">io</span>.<span class="hljs-built_in">open</span>(name,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> f~=<span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span> <span class="hljs-built_in">io</span>.<span class="hljs-built_in">close</span>(f) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-keyword">end</span><br> <span class="hljs-keyword">end</span><br> <br> <span class="hljs-keyword">local</span> newFile = ngx.var.request_filename;<br> <span class="hljs-keyword">local</span> originalFile = newFile:<span class="hljs-built_in">sub</span>(<span class="hljs-number">1</span>, #newFile - <span class="hljs-number">5</span>); <span class="hljs-comment">--请求的webp图片去掉.webp后缀</span><br><br> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_exists(originalFile) <span class="hljs-keyword">then</span><br>   ngx.<span class="hljs-built_in">exit</span>(<span class="hljs-number">404</span>);<br>   <span class="hljs-keyword">return</span>;<br> <span class="hljs-keyword">end</span><br> <br> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">execute</span>(<span class="hljs-string">&quot;cwebp -q 75 &quot;</span> .. originalFile  .. <span class="hljs-string">&quot; -o &quot;</span> .. newFile);  <span class="hljs-comment">--用libwebp转换图片</span><br><br> <span class="hljs-keyword">if</span> file_exists(newFile) <span class="hljs-keyword">then</span><br>     ngx.exec(ngx.var.uri); <span class="hljs-comment">--重定向到转换成的webp图片</span><br> <span class="hljs-keyword">else</span><br>     ngx.<span class="hljs-built_in">exit</span>(<span class="hljs-number">404</span>); <span class="hljs-comment">--转换失败：404</span><br> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>
<p><img src="https://file.moetu.org/images/2020/01/06/weblua2dc97f3492a10817.jpg" alt="WebP转换的Lua"></p>
<h1 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h1><p>访问前图片，服务器上没有WebP文件。</p>
<p><img src="https://file.moetu.org/images/2020/01/06/3123de3b82b6d0ef1761eac2796a88fa58aa0d2c178c2991.jpg" alt="访问前图片"></p>
<p>当服务器接收到<code>.jpg.webp</code>的请求后，自动生成WebP文件：</p>
<p><img src="https://file.moetu.org/images/2020/01/06/webpdd22bfaefcb9faff.jpg" alt="访问后自动生成WebP"></p>
]]></content>
      <categories>
        <category>开发</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>WebP</tag>
      </tags>
  </entry>
  <entry>
    <title>实现浏览器WebP图片自适应加载</title>
    <url>/p/3MDAQPQ.html</url>
    <content><![CDATA[<p>让网站根据浏览器是否支持WebP来自适应加载相应格式的图片，如果在代码中进行判断，那工作量是巨大的，因为要修改代码中每一个图片的引用方式，有没有一种简便高效的方法呢？答案还是有的，那就是修改Nginx的配置。</p>
<h1 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h1><p>如何判断浏览器是否支持WebP格式的图片，除了在前端加载一个1×1像素的WebP图片来获取宽度的方法，还有个方法，那就是查看浏览器发出的请求头中的Accept字段，如果改字段中带着<code>image/webp</code>说明浏览器支持WebP，反之则就是不持支。</p>
<a id="more"></a>

<p>不支持WebP的IE的请求头Accept字段：</p>
<p><img src="https://file.moetu.org/images/2020/01/08/WebPIEAccept14c6d4ecc012785f.jpg" alt="不支持WebP的IE的请求头Accept字段"></p>
<p>支持WebP的Firefox的请求头Accept字段：</p>
<p><img src="https://file.moetu.org/images/2020/01/08/WebPFirefoxAccept08877c383da9747a.jpg" alt="支持WebP的Firefox的请求头Accept字段"></p>
<p>支持WebP的Chrome的请求头Accept字段：</p>
<p><img src="https://file.moetu.org/images/2020/01/08/ChromeAcceptad5df29d04e6d935.jpg" alt="支持WebP的Chrome的请求头Accept字段"></p>
<p>根据这个，我们可以修改Nginx的配置文件，让以**<code>.jgp</code>、<code>.jpeg</code>和<code>.png</code>结尾的请求**并且请求头Accept字段包含<code>image/webp</code>的请求进行WebP文件的判断，这个判断我们写在Lua文件中。在Lua文件中，先判断该文件对应的WebP文件是否存在，如果存在，则直接重定向到WebP文件，如果不存在，先调用libwebp方法生成WebP文件，再进行重定向。</p>
<p>有了这个思路，我们进行尝试。</p>
<h1 id="修改准备"><a href="#修改准备" class="headerlink" title="修改准备"></a>修改准备</h1><h2 id="Nginx安装Lua模块"><a href="#Nginx安装Lua模块" class="headerlink" title="Nginx安装Lua模块"></a>Nginx安装Lua模块</h2><p>略</p>
<h2 id="服务器安装libwebp"><a href="#服务器安装libwebp" class="headerlink" title="服务器安装libwebp"></a>服务器安装libwebp</h2><p>参考：<a href="https://zmlu.me/p/2jj2ae2.html">Nginx+Lua+libwebp实现服务器图片自动转WebP</a></p>
<h2 id="Nginx-conf"><a href="#Nginx-conf" class="headerlink" title="Nginx.conf"></a>Nginx.conf</h2><p>因为if不能同时判断多个条件，所以我们定义一个变量，用if修改变量值，最后根据该变量的值来判断是否满足所有的条件。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">location /img &#123;<br>        set                   $cwebp_flag 0;<br>    <br>        if ($uri ~ \.(png|jpg|jpeg)$) &#123;<br>            set  $cwebp_flag &#x27;$&#123;cwebp_flag&#125;1&#x27;;<br>        &#125;<br>    <br>        if ($http_accept ~ image/webp) &#123;<br>            set  $cwebp_flag &#x27;$&#123;cwebp_flag&#125;1&#x27;;<br>        &#125;<br>    <br>        if ($cwebp_flag = 011) &#123;<br>            content_by_lua_file  lua/imgProcess.lua;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>
<h2 id="imgProcess-lua"><a href="#imgProcess-lua" class="headerlink" title="imgProcess.lua"></a>imgProcess.lua</h2><p>这个文件主要工作是：先判断该文件对应的WebP文件是否存在，如果存在，则直接重定向到WebP文件，如果不存在，先调用libwebp方法生成WebP文件，再进行重定向。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_exists</span><span class="hljs-params">(name)</span></span><br>	<span class="hljs-keyword">local</span> f=<span class="hljs-built_in">io</span>.<span class="hljs-built_in">open</span>(name,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> f~=<span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span> <span class="hljs-built_in">io</span>.<span class="hljs-built_in">close</span>(f) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br> <br><span class="hljs-keyword">local</span> originalFile = ngx.var.request_filename;<br><span class="hljs-keyword">local</span> newFile = ngx.var.request_filename .. <span class="hljs-string">&quot;.webp&quot;</span>;<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_exists(newFile) <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_exists(originalFile) <span class="hljs-keyword">then</span><br>    ngx.<span class="hljs-built_in">exit</span>(<span class="hljs-number">404</span>);<br>    <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-built_in">os</span>.<span class="hljs-built_in">execute</span>(<span class="hljs-string">&quot;cwebp -q 75 &quot;</span> .. originalFile  .. <span class="hljs-string">&quot; -o &quot;</span> .. newFile); <br><br>  <span class="hljs-keyword">if</span> file_exists(newFile) <span class="hljs-keyword">then</span><br>    ngx.header.vary = <span class="hljs-string">&#x27;accept, accept-encoding&#x27;</span>;<br>    ngx.header.x_webp = <span class="hljs-string">&#x27;generate&#x27;</span>;<br>    ngx.header.real_source_url = ngx.var.uri .. <span class="hljs-string">&quot;.webp&quot;</span>;<br>    ngx.header.content_type = <span class="hljs-string">&quot;image/webp&quot;</span>;<br>    <span class="hljs-keyword">return</span> ngx.exec(ngx.var.uri .. <span class="hljs-string">&quot;.webp&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    ngx.<span class="hljs-built_in">exit</span>(<span class="hljs-number">500</span>);<br>    <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br>  ngx.header.vary = <span class="hljs-string">&#x27;accept, accept-encoding&#x27;</span>;<br>  ngx.header.x_webp = <span class="hljs-string">&#x27;read&#x27;</span>;<br>  ngx.header.real_source_url = ngx.var.uri .. <span class="hljs-string">&quot;.webp&quot;</span>;<br>  ngx.header.content_type = <span class="hljs-string">&quot;image/webp&quot;</span>;<br>  <span class="hljs-keyword">return</span> ngx.exec(ngx.var.uri .. <span class="hljs-string">&quot;.webp&quot;</span>);<br><span class="hljs-keyword">end</span><br><br> <br><br></code></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>用不支持WebP的IE和支持WebP的Chrome打开同一张图片的地址，我们发现服务器给他们返回的响应内容是不一样的。</p>
<p>支持WebP的Chrome的相应内容是WebP格式的图片：</p>
<p><img src="https://file.moetu.org/images/2020/01/08/Chrome546a1f0b913288f7.jpg" alt="Chrome的响应内容"></p>
<p>而不支持WebP的IE的相应内容就是普通的jpg图片：</p>
<p><img src="https://file.moetu.org/images/2020/01/08/IEa287039efc97d622.jpg" alt="IE的响应内容"></p>
]]></content>
      <categories>
        <category>开发</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>WebP</tag>
      </tags>
  </entry>
  <entry>
    <title>「翻译」Java 14带来了许多新功能</title>
    <url>/p/2305442.html</url>
    <content><![CDATA[<p>Java 14包含比前两个发行版更多的新功能-其中大多数旨在简化编程开发工作。</p>
<p>Java 14计划于3月17日发布。版本14包含的<a href="https://openjdk.java.net/projects/jdk/14/">JEP</a>（Java Enhancement Proposals）比Java 12和13的总和还多。 那么，对于每天编写和维护代码的Java开发人员来说，最重要的是什么呢？</p>
<p>在本文中，我研究了以下主要方面：</p>
<ul>
<li>改进的<code>switch</code>表达式，该表达式最初在Java 12和Java 13中作为预览出现，现在已完全成为Java 14的一部分</li>
<li>新增<code>instanceof</code>的模式匹配（语法糖）</li>
<li>增强的<code>NullPointerExceptions</code>提示（JVM功能）</li>
</ul>
<p>如果您阅读本文并尝试在代码库中使用其中的某些功能，建议您通过<a href="mailto:amber-dev@openjdk.java.net">向Java团队提供反馈</a>来分享您的经验。 这样，您就有机会为Java的发展做出贡献。</p>
<a id="more"></a>

<h1 id="switch-表达式"><a href="#switch-表达式" class="headerlink" title="switch 表达式"></a>switch 表达式</h1><p>在Java 14中，switch 表达式被保留变为正式版本。</p>
<p>在早期版本中，switch 表达式是Beta功能。 提醒一下，将特征指定为 Beta 以收集反馈，并且根据反馈可能会更改甚至删除这些特征。 但预计大多数最终将在 Java 中被保留下来。</p>
<p>新的 switch 表达式的优点让出bug的几率降低。 作为一个刷新示例，switch表达式现在可以利用箭头语法，例如在以下示例中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> log = <span class="hljs-keyword">switch</span> (event) &#123;<br>    <span class="hljs-keyword">case</span> PLAY -&gt; <span class="hljs-string">&quot;User has triggered the play button&quot;</span>;<br>    <span class="hljs-keyword">case</span> STOP, PAUSE -&gt; <span class="hljs-string">&quot;User needs a break&quot;</span>;<br>    <span class="hljs-keyword">default</span> -&gt; &#123;<br>        String message = event.toString();<br>        LocalDateTime now = LocalDateTime.now();<br>        yield <span class="hljs-string">&quot;Unknown event &quot;</span> + message + <br>              <span class="hljs-string">&quot; logged on &quot;</span> + now;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<h1 id="Text-Block-Beta"><a href="#Text-Block-Beta" class="headerlink" title="Text Block (Beta)"></a>Text Block (Beta)</h1><p>Java 13引入了<code>Text Block</code>作为Beta功能。 <code>Text Block</code>使使用多行字符串文字更加容易。 此功能在Java 14将是第二个版本的Beta功能，并进行了一些调整。 作为回顾，编写带有许多字符串连接和转义序列的代码以提供适当的多行文本格式非常普遍。 下面的代码显示了HTML格式的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String html = <span class="hljs-string">&quot;&lt;HTML&gt;&quot;</span> +<br><span class="hljs-string">&quot;\n\t&quot;</span> + <span class="hljs-string">&quot;&lt;BODY&gt;&quot;</span> +<br><span class="hljs-string">&quot;\n\t\t&quot;</span> + <span class="hljs-string">&quot;&lt;H1&gt;\&quot;Java 14 is here!\&quot;&lt;/H1&gt;&quot;</span> +<br><span class="hljs-string">&quot;\n\t&quot;</span> + <span class="hljs-string">&quot;&lt;/BODY&gt;&quot;</span> +<br><span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;&lt;/HTML&gt;&quot;</span>;<br></code></pre></td></tr></table></figure>
<p>使用<code>Text Block</code>，您可以简化此过程并使用界定<code>Text Block</code>开头和结尾的三个引号来编写更优雅的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String html = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&lt;HTML&gt;</span><br><span class="hljs-string">  &lt;BODY&gt;</span><br><span class="hljs-string">    &lt;H1&gt;&quot;</span>Java <span class="hljs-number">14</span> is here!<span class="hljs-string">&quot;&lt;/H1&gt;</span><br><span class="hljs-string">  &lt;/BODY&gt;</span><br><span class="hljs-string">&lt;/HTML&gt;&quot;</span><span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure>
<p>与普通字符串文字相比，<code>Text Block</code>还提供了更高的表达能力。</p>
<p>Java 14中添加了两个新的转义序列。首先，您可以使用新的<code>\s</code>转义序列表示单个空格。 其次，您可以使用反斜杠<code>\</code>来禁止在行尾插入新行字符。 当您想分隔很长的行以简化<code>Text Block</code>内的可读性时，这很有用。</p>
<p>例如，当前处理多行字符串的方法是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String literal = <br>         <span class="hljs-string">&quot;Lorem ipsum dolor sit amet, consectetur adipiscing &quot;</span> +<br>         <span class="hljs-string">&quot;elit, sed do eiusmod tempor incididunt ut labore &quot;</span> +<br>         <span class="hljs-string">&quot;et dolore magna aliqua.&quot;</span>;<br></code></pre></td></tr></table></figure>
<p>使用<code>Text Block</code>中的<code>\</code>转义序列，可以表示如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String text = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    Lorem ipsum dolor sit amet, consectetur adipiscing \</span><br><span class="hljs-string">    elit, sed do eiusmod tempor incididunt ut labore \</span><br><span class="hljs-string">    et dolore magna aliqua.\</span><br><span class="hljs-string">    &quot;</span><span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure>
<h1 id="instanceof-的模式匹配-Beta"><a href="#instanceof-的模式匹配-Beta" class="headerlink" title="instanceof 的模式匹配 (Beta)"></a>instanceof 的模式匹配 (Beta)</h1><p>Java 14引入了该Beta功能，该功能有助于消除对在有条件的<code>instanceof</code>检查之前进行显式强制转换的需求。 例如，考虑以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Group) &#123;<br>  Group group = (Group) obj;<br><br>  <span class="hljs-comment">// use group specific methods</span><br>  <span class="hljs-keyword">var</span> entries = group.getEntries();<br>&#125;<br></code></pre></td></tr></table></figure>
<p>可以使用<code>instanceof</code>的模式匹配功能将其重构为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Group group) &#123;<br>  <span class="hljs-keyword">var</span> entries = group.getEntries();<br>&#125;<br></code></pre></td></tr></table></figure>
<p>由于条件检查断言<code>obj</code>是<code>Group</code>类型，为什么还要在第一个代码段中把<code>obj</code>强制转换为<code>Group</code>类型？ 这可能会增加错误几率。`</p>
<p>较短的语法将删除典型Java程序中的许多强制转换。 （2011年一项提出相关语言功能的研究报告指出，所有演员表中约有24％遵循条件语句中的<code>instanceof</code>。）</p>
<p>JEP 305涵盖了此更改，并从Joshua Bloch的Effective Java书中指出了一个示例，该示例通过以下相等方法进行说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123; <br>    <span class="hljs-keyword">return</span> (o <span class="hljs-keyword">instanceof</span> CaseInsensitiveString) &amp;&amp; <br>            ((CaseInsensitiveString) o).s.equalsIgnoreCase(s); <br>&#125;<br></code></pre></td></tr></table></figure>
<p>通过删除对CaseInsensitiveString的冗余显式转换，可以将前面的代码简化为以下形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123; <br>    <span class="hljs-keyword">return</span> (o <span class="hljs-keyword">instanceof</span> CaseInsensitiveString cis) &amp;&amp;<br>            cis.s.equalsIgnoreCase(s); <br>&#125;<br></code></pre></td></tr></table></figure>
<p>这是一个有趣的预览功能，因为它为更广泛的模式匹配打开了大门。 模式匹配的思想是为语言功能提供方便的语法，以根据某些条件提取对象的成分。 <code>instanceof</code>运算符就是这种情况，因为条件是类型检查，并且提取操作正在调用适当的方法或访问特定字段。</p>
<p>换句话说，此预览功能仅仅是个开始，您可以期待一种语言功能，它可以帮助进一步减少冗长性，从而减少错误的可能性。</p>
<h1 id="record-修饰符-Beta"><a href="#record-修饰符-Beta" class="headerlink" title="record 修饰符 (Beta)"></a>record 修饰符 (Beta)</h1><p>本次更新中还有另一种Beta功能：<code>record</code>修饰符。 像到目前为止提出的其他想法一样，此功能遵循减少Java冗长并帮助开发人员编写更简洁的代码的趋势。 记录集中在某些域类上，这些类仅用于将数据存储在字段中，并且不声明任何自定义行为。</p>
<p>为了直接解决问题，用一个简单的类<code>BankTransaction</code>进行举例，该类使用三个字段对交易进行建模：<code>date</code>，<code>amount</code>和<code>description</code>。 声明类时，您需要担心多个问题：</p>
<ul>
<li>构造方法</li>
<li><code>Getter</code> 方法</li>
<li><code>toString()</code> 方法</li>
<li><code>hashCode()</code> 和 <code>equals()</code> 方法</li>
</ul>
<p>此类组件的代码通常由IDE自动生成，并占用大量空间。 这是<code>BankTransaction</code>类的完整生成的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BankTransaction</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LocalDate date;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> amount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String description;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BankTransaction</span><span class="hljs-params">(<span class="hljs-keyword">final</span> LocalDate date, </span></span><br><span class="hljs-function"><span class="hljs-params">                           <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> amount, </span></span><br><span class="hljs-function"><span class="hljs-params">                           <span class="hljs-keyword">final</span> String description)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.date = date;<br>        <span class="hljs-keyword">this</span>.amount = amount;<br>        <span class="hljs-keyword">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LocalDate <span class="hljs-title">date</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">amount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> amount;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">description</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;BankTransaction&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;date=&quot;</span> + date +<br>                <span class="hljs-string">&quot;, amount=&quot;</span> + amount +<br>                <span class="hljs-string">&quot;, description=&#x27;&quot;</span> + description + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        BankTransaction that = (BankTransaction) o;<br>        <span class="hljs-keyword">return</span> Double.compare(that.amount, amount) == <span class="hljs-number">0</span> &amp;&amp;<br>                date.equals(that.date) &amp;&amp;<br>                description.equals(that.description);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(date, amount, description);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>Java 14提供了一种消除冗长且明确意图的方法，即您所需要的只是一个仅将数据与<code>equals</code>，<code>hashCode</code>和<code>toString</code>方法的实现一起聚合的类。 您可以按以下方式重构<code>BankTransaction</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> record <span class="hljs-title">BankTransaction</span><span class="hljs-params">(LocalDate date,</span></span><br><span class="hljs-function"><span class="hljs-params">                              <span class="hljs-keyword">double</span> amount,</span></span><br><span class="hljs-function"><span class="hljs-params">                              String description)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>
<p>使用<code>record</code>修饰符，您可以“自动”获取除构造函数和获取器之外的<code>equals</code>，<code>hashCode</code>和<code>toString</code>方法的实现。</p>
<p>要尝试该示例，请记住您需要使用预览标志来编译文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">javac --enable-preview --release 14 BankTransaction.java<br></code></pre></td></tr></table></figure>
<p>被<code>record</code>修饰的类是隐式的<code>final</code>类。 这意味着您无法重新分配它们。 请注意，但这并不意味着整个记录都是不变的。 存储在字段中的对象本身可以是可变的。</p>
<p>如果您对有关<code>record</code>的更详细的文章感兴趣，请查看<a href="https://blogs.oracle.com/javamagazine/records-come-to-java">Java杂志上Ben Evans的最新文章</a>。</p>
<p>敬请关注。 从教育的角度来看，<code>record</code>还为下一代Java开发人员提出了有趣的问题。 例如，如果您指导初级开发人员，那么什么时候应该在课程中引入<code>record</code>：在引入OOP和类之前或之后？</p>
<h1 id="增强的-NullPointerExceptions-Beta"><a href="#增强的-NullPointerExceptions-Beta" class="headerlink" title="增强的 NullPointerExceptions (Beta)"></a>增强的 NullPointerExceptions (Beta)</h1><p>有人说抛出<code>NullPointerExceptions</code>应该是Java中新的<code>“Hello world”</code>，因为您无法逃避它们。 撇开笑话，它们会引起挫败感，因为当代码在生产环境中运行时，它们经常出现在应用程序日志中，这可能使调试变得困难，因为原码不容易获得。 例如，考虑以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> name = user.getLocation().getCity().getName();<br></code></pre></td></tr></table></figure>
<p>在Java 14之前，您可能会收到以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Exception in thread &quot;main&quot; java.lang.NullPointerException<br>    at NullPointerExample.main(NullPointerExample.java:5)<br></code></pre></td></tr></table></figure>
<p>不幸的是，如果在第5行，有一个具有多个方法调用的赋值——<code>getLocation()</code>和<code>getCity()</code>——两者都可能返回<code>null</code>。 实际上，变量<code>user</code>也可以为<code>null</code>。 因此，尚不清楚是什么导致了<strong>NullPointerException</strong>。</p>
<p>现在，使用Java 14，有一个新的JVM功能，通过它您可以接收更多信息的诊断：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Exception in thread &quot;main&quot; java.lang.NullPointerException: Cannot invoke &quot;Location.getCity()&quot; because the return value of &quot;User.getLocation()&quot; is null<br></code></pre></td></tr></table></figure>
<p>该消息现在具有两个明确的组成部分：</p>
<ul>
<li><strong>结果</strong>：无法调用<code>Location.getCity()</code>。</li>
<li><strong>原因</strong>：<code>User.getLocation()</code>的返回值为<code>null</code>。</li>
</ul>
<p>仅当您使用以下标志运行Java时，增强型诊断才有效：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">-XX:+ShowCodeDetailsInExceptionMessages<br></code></pre></td></tr></table></figure>
<p>这是一个例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">java -XX:+ShowCodeDetailsInExceptionMessages NullPointerExample<br></code></pre></td></tr></table></figure>
<p>在Java的未来版本中，此功能可能默认启用，如<a href="https://bugs.openjdk.java.net/browse/JDK-8233014">此处报告</a>。</p>
<p>此增强功能不仅可用于方法调用，还可用于可以导致<code>NullPointerException</code>异常的其他地方，包括字段访问，数组访问和赋值。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在Java 14中，有新的Beta功能和更新可帮助开发人员进行日常工作。 例如，Java 14引入了<code>instanceof</code>模式匹配，这是减少显式强制转换的一种方式。 而且，Java 14引入了<code>record</code>，这是一种新的结构，用于简洁地声明仅用于聚合数据的类。 此外，<code>NullPointerException</code>消息已得到改进，具有更好的诊断功能，并且<code>switch</code>表达式现在已成为Java 14的一部分。<code>Text Block</code>是一种可帮助您处理多行字符串值的功能，在引入了两个新的转义序列后，将进行另一轮预览。 Java操作的一部分技术人员可能会感兴趣的另一项更改是<a href="https://openjdk.java.net/jeps/349">JDK Flight Recorder中的事件流</a>。 Ben Evans在<a href="https://blogs.oracle.com/javamagazine/java-flight-recorder-and-jfr-event-streaming-in-java-14">他的文章中</a>中讨论了该功能。</p>
<p>如您所见，Java 14带来了很多创新。 您绝对应该考虑一下，并将有关Beta功能的反馈发送给Java团队。</p>
<blockquote>
<p>原文：<a href="https://blogs.oracle.com/javamagazine/java-14-arrives-with-a-host-of-new-features">Java 14 Arrives with a Host of New Features</a></p>
</blockquote>
]]></content>
      <categories>
        <category>开发</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>[Material Design] 尝试使用 Bottom Navigation</title>
    <url>/p/GJ0Q47.html</url>
    <content><![CDATA[<p>Material Design是由Google推出的全新的设计语言，谷歌表示，这种设计语言旨在为手机、平板电脑、台式机和“其他平台”提供更一致、更广泛的“外观和感觉”。</p>
<p>Material Design的一些重要功能包括系统字体Roboto的升级版本，同时颜色更鲜艳，动画效果更突出。谷歌的想法是让谷歌平台上的开发者掌握这个新框架，从而让所有应用就有统一的外观，就像是苹果向开发者提出的设计原则一样。</p>
<p>一直感觉Material Design设计很是好看，尤其是底部的导航栏，简约的图标以及透明的背景。决定自己体验一把。</p>
<a id="more"></a>

<p>先上效果图：</p>
<p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/2019122001-material-design-notes-bottom-navigation.md-14bd1b8c91c5f8b99.gif" alt="效果图"></p>
<h1 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h1><p>Bottom Navigation经常用于底部导航栏。不过它所包含的标签页不应过多也不应该过少，<a href="https://material.io/guidelines/components/bottom-navigation.html">谷歌官方文档</a>中表示，标签页的个数在3-5个左右合适。</p>
<h1 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h1><h2 id="在Module的build-gradle中添加如下代码"><a href="#在Module的build-gradle中添加如下代码" class="headerlink" title="在Module的build.gradle中添加如下代码"></a>在Module的build.gradle中添加如下代码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">compile &#x27;com.roughike:bottom-bar:2.0.2&#x27;<br></code></pre></td></tr></table></figure>
<p>实现Bottom Navigation功能，比较好用的是第三方的BottomBar库，截止2017.1.8，最新的版本是2.0.2，如果需要最新版，请访问 <a href="https://github.com/roughike/BottomBar">BottomBar的Github Repository</a></p>
<h2 id="在res下新建类型为xml的xml文件夹"><a href="#在res下新建类型为xml的xml文件夹" class="headerlink" title="在res下新建类型为xml的xml文件夹"></a>在res下新建类型为xml的xml文件夹</h2><p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/2019122001-material-design-notes-bottom-navigation.md-27a8c62661b42fd13.png"></p>
<p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/20210120100350.png"></p>
<h2 id="在xml文件夹下新建bottombar-tabs-xml文件"><a href="#在xml文件夹下新建bottombar-tabs-xml文件" class="headerlink" title="在xml文件夹下新建bottombar_tabs.xml文件"></a>在xml文件夹下新建bottombar_tabs.xml文件</h2><p>res/xml/bottombar_tabs.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">PreferenceScreen</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tabs</span>&gt;</span><br>        &lt;tab<br>            id=&quot;@+id/tab_one&quot;<br>            icon=&quot;@drawable/ic_3d_rotation_white_24dp&quot;<br>            title=&quot;财务&quot;<br>            barColorWhenSelected=&quot;#865242&quot;<br>            inActiveColor=&quot;#FFFFFF&quot;<br>            activeColor = &quot;#FFFFFF&quot;/&gt;<br>        &lt;tab<br>            id=&quot;@+id/tab_two&quot;<br>            icon=&quot;@drawable/ic_account_balance_white_24dp&quot;<br>            title=&quot;群组&quot;<br>            barColorWhenSelected=&quot;#268434&quot;<br>            inActiveColor=&quot;#FFFFFF&quot;<br>            activeColor = &quot;#FFFFFF&quot;/&gt;<br>        &lt;tab<br>            id=&quot;@+id/tab_three&quot;<br>            icon=&quot;@drawable/ic_accessibility_white_24dp&quot;<br>            title=&quot;朋友&quot;<br>            barColorWhenSelected=&quot;#8b2099&quot;<br>            inActiveColor=&quot;#FFFFFF&quot;<br>            activeColor = &quot;#FFFFFF&quot;/&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tabs</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">PreferenceScreen</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><code>barColorWhenSelected</code>属性控制着当这个Tab被选择时，BottomBar的整体颜色。<code>inActiveColor</code>属性是这个Tab未激活时图片的颜色。与之相对应的<code>activeColor</code>属性，则是控制着激活时的图片颜色。</p>
<h2 id="activity-main-xml"><a href="#activity-main-xml" class="headerlink" title="activity_main.xml"></a>activity_main.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/activity_main&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingBottom</span>=<span class="hljs-string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingLeft</span>=<span class="hljs-string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingRight</span>=<span class="hljs-string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingTop</span>=<span class="hljs-string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;me.luzhoumin.bottomnavigation.MainActivity&quot;</span>&gt;</span><br><br>    &lt;com.roughike.bottombar.BottomBar<br>        android:id=&quot;@+id/bottomBar&quot;<br>        android:layout_width=&quot;match_parent&quot;<br>        android:layout_height=&quot;60dp&quot;<br>        android:layout_alignParentBottom=&quot;true&quot;<br>        app:bb_tabXmlResource=&quot;@xml/bottombar_tabs&quot;<br>        app:bb_behavior=&quot;underNavbar&quot;<br>        app:bb_inActiveTabAlpha=&quot;0.6&quot;<br>        app:bb_activeTabAlpha=&quot;1&quot;<br>        app:bb_showShadow=&quot;true&quot;/&gt;<br><br>    &lt;TextView<br>        android:id=&quot;@+id/textview&quot;<br>        android:layout_width=&quot;wrap_content&quot;<br>        android:layout_height=&quot;wrap_content&quot;<br>        android:textSize=&quot;36sp&quot;<br>        android:text=&quot;Hello World!&quot;<br>        android:layout_alignParentTop=&quot;true&quot;<br>        android:layout_alignParentStart=&quot;true&quot;<br>        android:layout_marginTop=&quot;51dp&quot; /&gt;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><code>app:bb_tabXmlResource</code>指向的是第三步建的xml文件，里面有每个Tab的属性。</p>
<h2 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.support.annotation.IdRes;<br><span class="hljs-keyword">import</span> android.support.v7.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><span class="hljs-keyword">import</span> com.roughike.bottombar.BottomBar;<br><span class="hljs-keyword">import</span> com.roughike.bottombar.BottomBarTab;<br><span class="hljs-keyword">import</span> com.roughike.bottombar.OnTabReselectListener;<br><span class="hljs-keyword">import</span> com.roughike.bottombar.OnTabSelectListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-comment">//获取Bottom Bar组件</span><br>        BottomBar bottomBar = (BottomBar) findViewById(R.id.bottomBar);<br>        <span class="hljs-comment">//获取用来显示的TextView组件</span><br>        <span class="hljs-keyword">final</span> TextView tv = (TextView) findViewById(R.id.textview);<br>        <span class="hljs-comment">//设置Bottom Bar的选择监听器</span><br>        bottomBar.setOnTabSelectListener(<span class="hljs-keyword">new</span> OnTabSelectListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onTabSelected</span><span class="hljs-params">(<span class="hljs-meta">@IdRes</span> <span class="hljs-keyword">int</span> tabId)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span> (tabId == R.id.tab_one)&#123;<br>                    tv.setText(<span class="hljs-string">&quot;tab_one 被点击&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (tabId == R.id.tab_two)&#123;<br>                    tv.setText(<span class="hljs-string">&quot;tab_group 被点击&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (tabId == R.id.tab_three)&#123;<br>                    tv.setText(<span class="hljs-string">&quot;tab_three 被点击&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//设置Bottom Bar的重复选择监听器</span><br>        bottomBar.setOnTabReselectListener(<span class="hljs-keyword">new</span> OnTabReselectListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onTabReSelected</span><span class="hljs-params">(<span class="hljs-meta">@IdRes</span> <span class="hljs-keyword">int</span> tabId)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span> (tabId == R.id.tab_one)&#123;<br>                    tv.setText(<span class="hljs-string">&quot;tab_one 再次被点击&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (tabId == R.id.tab_two)&#123;<br>                    tv.setText(<span class="hljs-string">&quot;tab_two 再次被点击&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (tabId == R.id.tab_three)&#123;<br>                    tv.setText(<span class="hljs-string">&quot;tab_three 再次被点击&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//设置Tab的Badge</span><br>        BottomBarTab nearby = bottomBar.getTabWithId(R.id.tab_two);<br>        nearby.setBadgeCount(<span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="修改主题样式"><a href="#修改主题样式" class="headerlink" title="修改主题样式"></a>修改主题样式</h2><p>res/values/styles.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Base application theme. --&gt;</span><br>    <span class="hljs-comment">&lt;!--修改主题为无ActionBar--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>&gt;</span><br><span class="xml">        <span class="hljs-comment">&lt;!-- Customize your theme here. --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimary&quot;</span>&gt;</span>@color/colorPrimary<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimaryDark&quot;</span>&gt;</span>@color/colorPrimaryDark<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorAccent&quot;</span>&gt;</span>@color/colorAccent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!--添加--&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:navigationBarColor&quot;</span>&gt;</span>@android:color/transparent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:windowTranslucentNavigation&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:windowDrawsSystemBarBackgrounds&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="BottomBar-API"><a href="#BottomBar-API" class="headerlink" title="BottomBar API"></a>BottomBar API</h1><h2 id="For-the-BottomBar"><a href="#For-the-BottomBar" class="headerlink" title="For the BottomBar"></a>For the BottomBar</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;com.roughike.bottombar.BottomBar<br>    android:id=&quot;@+id/bottomBar&quot;<br>    android:layout_width=&quot;match_parent&quot;<br>    android:layout_height=&quot;60dp&quot;<br>    android:layout_alignParentBottom=&quot;true&quot;<br>    app:bb_tabXmlResource=&quot;@xml/bottombar_tabs_three&quot;<br>    app:bb_tabletMode=&quot;true&quot;<br>    app:bb_behavior=&quot;shifting|shy|underNavbar&quot;<br>    app:bb_inActiveTabAlpha=&quot;0.6&quot;<br>    app:bb_activeTabAlpha=&quot;1&quot;<br>    app:bb_inActiveTabColor=&quot;#222222&quot;<br>    app:bb_activeTabColor=&quot;@color/colorPrimary&quot;<br>    app:bb_titleTextAppearance=&quot;@style/MyTextAppearance&quot;<br>    app:bb_titleTypeFace=&quot;fonts/MySuperDuperFont.ttf&quot;<br>    app:bb_showShadow=&quot;true&quot; /&gt;<br></code></pre></td></tr></table></figure>
<p><strong>bb_tabXmlResource</strong></p>
<p>the XML Resource id for your tabs, that reside in values/xml/</p>
<p><strong>bb_tabletMode</strong></p>
<p>if you want the BottomBar to behave differently for tablets. There’s an example of this in the sample project!</p>
<p><strong>bb_behavior</strong></p>
<ul>
<li><code>shifting</code>: the selected tab is wider than the rest.</li>
<li><code>shy</code>: put the BottomBar inside a CoordinatorLayout and it’ll automatically hide on scroll!</li>
<li><code>underNavbar</code>: draw the BottomBar under the navBar!</li>
</ul>
<p><strong>bb_inActiveTabAlpha</strong></p>
<p>the alpha value for inactive tabs, that’s used in the tab icons and titles.</p>
<p><strong>bb_activeTabAlpha</strong></p>
<p>the alpha value for active tabs, that’s used in the tab icons and titles.</p>
<p><strong>bb_inActiveTabColor</strong></p>
<p>the color for inactive tabs, that’s used in the tab icons and titles.</p>
<p><strong>bb_activeTabColor</strong></p>
<p>the color for active tabs, that’s used in the tab icons and titles.</p>
<p><strong>bb_badgeBackgroundColor</strong></p>
<p>the background color for any Badges in this BottomBar.</p>
<p><strong>bb_titleTextAppearance</strong></p>
<p>custom textAppearance for the titles</p>
<p><strong>bb_titleTypeFace</strong></p>
<p>path for your custom font file, such as <code>fonts/MySuperDuperFont.ttf</code>. In that case your font path would look like <code>src/main/assets/fonts/MySuperDuperFont.ttf</code>, but you only need to provide <code>fonts/MySuperDuperFont.ttf</code>, as the asset folder will be auto-filled for you.</p>
<p><strong>bb_showShadow</strong></p>
<p>controls whether the shadow is shown or hidden, defaults to true.</p>
<h2 id="For-the-tabs"><a href="#For-the-tabs" class="headerlink" title="For the tabs"></a>For the tabs</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;tab<br>    id=&quot;@+id/tab_recents&quot;<br>    title=&quot;Recents&quot;<br>    icon=&quot;@drawable/empty_icon&quot;<br>    inActiveColor=&quot;#00FF00&quot;<br>    activeColor=&quot;#FF0000&quot;<br>    barColorWhenSelected=&quot;#FF0000&quot;<br>    badgeBackgroundColor=&quot;#FF0000&quot; /&gt;<br></code></pre></td></tr></table></figure>
<p><strong>inActiveColor</strong></p>
<p>the color for inactive tabs, that’s used in the tab icons and titles.</p>
<p><strong>activeColor</strong></p>
<p>the color for active tabs, that’s used in the tab icons and titles.</p>
<p><strong>barColorWhenSelected</strong></p>
<p>the color that the whole BottomBar should be when selected this tab.</p>
<p><strong>badgeBackgroundColor</strong></p>
<p>the background color for any Badges in this tab.</p>
<h1 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h1><ul>
<li>Tab的图标必须是<strong>全透明、纯黑、24dp、Padding = 0dp</strong>，而且最好所有分辨密度的图片都要有，否则图标会很大或者很小，影响显示效果。</li>
<li>如果想保持在屏幕最底部，记得在布局xml的<code>&lt;com.roughike.bottombar.BottomBar&gt;</code>标签中添加属性<code>android:layout_alignParentBottom=&quot;true&quot;</code>，并且做好第六步工作。</li>
</ul>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://material.io/guidelines/components/bottom-navigation.html">谷歌官方文档</a></li>
<li><a href="https://github.com/roughike/BottomBar">BottomBar的Github Repository</a></li>
</ul>
<h1 id="与FloatingActionButton和SnackBar合作的效果"><a href="#与FloatingActionButton和SnackBar合作的效果" class="headerlink" title="与FloatingActionButton和SnackBar合作的效果"></a>与FloatingActionButton和SnackBar合作的效果</h1><p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/2019122001-material-design-notes-bottom-navigation.md-4368fd9376e31ff43.gif"></p>
]]></content>
      <categories>
        <category>开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Google</tag>
        <tag>Material Design</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Composer多线程安装、更新包方法</title>
    <url>/p/3PKQ4GE.html</url>
    <content><![CDATA[<p>Composer通过更换国内镜像源之后，发现安装和更新都很快了，但是由于是单线程下载，有时候还是慢的出奇，能不能在安装更新的时候使用多线程来下载依赖呢？</p>
<p>有一款Composer包可以实现此功能————<code>prestissimo</code>。</p>
<p>Github地址：<a href="https://github.com/hirak/prestissimo">hirak/prestissimo</a></p>
<a id="more"></a>

<h1 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">composer global require hirak/prestissimo<br></code></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><code>composer install/update</code> 任何需要大量安装依赖的情景，都会自动生效。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>Composer安装、更新速度慢问题解决</title>
    <url>/p/2ZHKMM0.html</url>
    <content><![CDATA[<p>今天想在自己的服务器上安装一个论坛软件，需要用到php的Composer来安装，无奈很慢，贴出自己的解决方法。</p>
<p>通过更换国内镜像源的方式来加快速度，我使用的是阿里的镜像源，还不错，挺快的。</p>
<a id="more"></a>

<h1 id="全局配置（推荐）"><a href="#全局配置（推荐）" class="headerlink" title="全局配置（推荐）"></a>全局配置（推荐）</h1><p>所有项目都会使用该镜像地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/<br></code></pre></td></tr></table></figure>
<p>取消配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">composer config -g --unset repos.packagist<br></code></pre></td></tr></table></figure>
<h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><p>仅修改当前工程配置，仅当前工程可使用该镜像地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">composer config repo.packagist composer https://mirrors.aliyun.com/composer/<br></code></pre></td></tr></table></figure>
<p>取消配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">composer config --unset repos.packagist<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Composer</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python在全局代理下安装包报错</title>
    <url>/p/1E56RCW.html</url>
    <content><![CDATA[<p>之前配置小飞机的时候，在我的mac上把终端设置了<code>ALL_PROXY</code>属性，让全局代理。<br>不过在使用Python安装模块的时候报错了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Python<span class="hljs-string">&#x27;s requests “Missing dependencies for SOCKS support” when using SOCKS5 from Terminal</span><br></code></pre></td></tr></table></figure>
<p>以下是解决办法:</p>
<a id="more"></a>

<p>首先去掉所有代理，和终端的<code>PROXY</code>属性，然后安装<code>pysocks</code>模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip install pysocks<br></code></pre></td></tr></table></figure>
<p>安装完毕后再加上代理或者终端<code>PROXY</code>属性，即可正常安装其他模块。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Python切片</title>
    <url>/p/253PZX0.html</url>
    <content><![CDATA[<p>记录下Python五个高级特性，分别是切片、迭代、列表生成式、生成器、迭代器，记录切片学习的笔记。</p>
<a id="more"></a>

<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p>取一个list或tuple的部分元素是非常常见的操作。比如，一个list如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">L = [<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Sarah&#x27;</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>]<br></code></pre></td></tr></table></figure>
<p>取前3个元素，应该怎么做？笨办法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">[L[<span class="hljs-number">0</span>], L[<span class="hljs-number">1</span>], L[<span class="hljs-number">2</span>]]<br></code></pre></td></tr></table></figure>
<p>或者用循环，不过代码都很长，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">r = []<br>n = <span class="hljs-number">3</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    r.append(L[i])<br></code></pre></td></tr></table></figure>
<p>对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）操作符，能大大简化这种操作。<br>对应上面的问题，取前3个元素，用一行代码就可以完成切片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">L[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure>
<p><code>L[0:3]</code>表示，从索引<code>0</code>开始取，直到索引<code>3</code>为止，但不包括索引<code>3</code>。即索引<code>0</code>，<code>1</code>，<code>2</code>，正好是3个元素。<br>如果第一个索引是<code>0</code>，还可以省略：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">L[:<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure>
<p>类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，试试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">L[-<span class="hljs-number">2</span>:]<br></code></pre></td></tr></table></figure>
<p>倒数第一个元素的索引是<code>-1</code>。<br>有一个0-99的数列，前10个数，每两个取一个：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; L[:10:2]</span><br>[0, 2, 4, 6, 8]<br></code></pre></td></tr></table></figure>
<p>所有数，每5个取一个：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; L[::5]</span><br>[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]<br></code></pre></td></tr></table></figure>
<p>什么都不写，只写[:]就可以原样复制一个list：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; L[:]</span><br>[0, 1, 2, 3, ..., 99]<br></code></pre></td></tr></table></figure>
<p>字符串’xxx’也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; <span class="hljs-string">&#x27;ABCDEFG&#x27;</span>[:3]</span><br>&#x27;ABC&#x27;<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; <span class="hljs-string">&#x27;ABCDEFG&#x27;</span>[::2]</span><br>&#x27;ACEG&#x27;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Scrapy抓取百度热点新闻</title>
    <url>/p/QHV65K.html</url>
    <content><![CDATA[<h2 id="安装Scrapy"><a href="#安装Scrapy" class="headerlink" title="安装Scrapy"></a>安装Scrapy</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip install Scrapy<br></code></pre></td></tr></table></figure>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">scrapy startproject tutorial<br></code></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="编写Item"><a href="#编写Item" class="headerlink" title="编写Item"></a>编写Item</h2><p>修改<code>items.py</code>文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaiduNewsItem</span>(<span class="hljs-params">scrapy.Item</span>):</span><br>    <span class="hljs-comment"># define the fields for your item here like:</span><br>    <span class="hljs-comment"># name = scrapy.Field()</span><br>    title = scrapy.Field()<br>    link = scrapy.Field()<br>    time = scrapy.Field()<br>    category = scrapy.Field()<br></code></pre></td></tr></table></figure>
<h2 id="编写爬虫-Spider"><a href="#编写爬虫-Spider" class="headerlink" title="编写爬虫(Spider)"></a>编写爬虫(Spider)</h2><p>在<code>spiders</code>文件夹下新建一个py文件，命名为<code>baidunews.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy,re<br><br><span class="hljs-keyword">from</span> tutorial.items <span class="hljs-keyword">import</span> BaiduNewsItem<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DmozSpider</span>(<span class="hljs-params">scrapy.Spider</span>):</span><br>    name = <span class="hljs-string">&quot;baidunews&quot;</span><br>    allowed_domains = [<span class="hljs-string">&quot;baidu.com&quot;</span>]<br>    start_urls = [<br>        <span class="hljs-string">&quot;http://news.baidu.com/widget?id=LatestNews&amp;channel=guoji&quot;</span>,<br>        <span class="hljs-string">&quot;http://news.baidu.com/widget?id=LatestNews&amp;channel=guonei&quot;</span>,<br>        <span class="hljs-string">&quot;http://news.baidu.com/widget?id=LatestNews&amp;channel=mil&quot;</span>,<br>        <span class="hljs-string">&quot;http://news.baidu.com/widget?id=LatestNews&amp;channel=ent&quot;</span>,<br>        <span class="hljs-string">&quot;http://news.baidu.com/widget?id=LatestNews&amp;channel=sports&quot;</span>,<br>        <span class="hljs-string">&quot;http://news.baidu.com/widget?id=LatestNews&amp;channel=tech&quot;</span>,<br>        <span class="hljs-string">&quot;http://news.baidu.com/widget?id=LatestNews&amp;channel=lady&quot;</span>,<br>    ]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span>(<span class="hljs-params">self, response</span>):</span><br>        category = &#123;<span class="hljs-string">&#x27;guoji&#x27;</span>:<span class="hljs-string">u&#x27;\u56fd\u9645&#x27;</span>,<span class="hljs-string">&#x27;guonei&#x27;</span>:<span class="hljs-string">u&#x27;\u56fd\u5185&#x27;</span>,<span class="hljs-string">&#x27;mil&#x27;</span>:<span class="hljs-string">u&#x27;\u519b\u4e8b&#x27;</span>,<span class="hljs-string">&#x27;ent&#x27;</span>:<span class="hljs-string">u&#x27;\u5a31\u4e50&#x27;</span>,<span class="hljs-string">&#x27;sports&#x27;</span>:<span class="hljs-string">u&#x27;\u4f53\u80b2&#x27;</span>,<span class="hljs-string">&#x27;tech&#x27;</span>:<span class="hljs-string">u&#x27;\u79d1\u6280&#x27;</span>,<span class="hljs-string">&#x27;lady&#x27;</span>:<span class="hljs-string">u&#x27;\u5973\u4eba&#x27;</span>&#125;<br>        <span class="hljs-keyword">for</span> sel <span class="hljs-keyword">in</span> response.xpath(<span class="hljs-string">&#x27;//div[@id=&quot;latest-news&quot;]/ul/li&#x27;</span>):<br>            item = BaiduNewsItem()<br>            item[<span class="hljs-string">&#x27;title&#x27;</span>] = sel.xpath(<span class="hljs-string">&#x27;a/text()&#x27;</span>)[<span class="hljs-number">0</span>].get()<br>            item[<span class="hljs-string">&#x27;link&#x27;</span>] = sel.xpath(<span class="hljs-string">&#x27;a/@href&#x27;</span>)[<span class="hljs-number">0</span>].get()<br>            item[<span class="hljs-string">&#x27;time&#x27;</span>] = sel.xpath(<span class="hljs-string">&#x27;span/text()&#x27;</span>)[<span class="hljs-number">0</span>].get()<br>            item[<span class="hljs-string">&#x27;category&#x27;</span>] = category[<span class="hljs-string">&quot;&quot;</span>.join(re.findall(<span class="hljs-string">&#x27;(^|&amp;)channel=([^&amp;]*)(&amp;|$)&#x27;</span>,response.url)[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])]<br>            <span class="hljs-keyword">yield</span> item<br></code></pre></td></tr></table></figure>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">scrapy crawl baidunews<br></code></pre></td></tr></table></figure>
<h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;巴基斯坦新增新冠肺炎确诊病例1748例，累计563..&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667639131171773453&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;13:30&quot;</span>&#125;,<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;面临破产危机！法国警告雷诺：若不“返回”法国将不提..&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667635925032421657&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;12:39&quot;</span>&#125;,<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;印度战机迫降到巴基斯坦，飞行员一句话瞬间就逗笑了在..&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667630787025851625&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;11:18&quot;</span>&#125;,<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;法国地方政府用菠萝丈量社交距离，被批“太幼稚”&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667624101851668641&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;09:32&quot;</span>&#125;,<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;大疆：正与巴基斯坦洽谈无人机治蝗 初中毕业生5天就..&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667620721060133107&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;08:38&quot;</span>&#125;,<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;离太近！德国警察“把错门”，错把卢森堡当成法国&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667617809556396961&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;07:51&quot;</span>&#125;,<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;温格：慎重面对外资进入法甲，不能毁了法国的足球文化&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667573388455325969&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;22:55&quot;</span>&#125;,<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;五角大楼终于松口，巴铁F-16将迎重大利好，该印度..&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667581813539045925&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;22:20&quot;</span>&#125;,<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;致敬！巴基斯坦坠机事故未造成地面人员死亡原因曝光&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667575501812426929&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;20:39&quot;</span>&#125;,<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;巴基斯坦官方：坠机事故97人遇难 2人幸存&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667574758558193863&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;20:29&quot;</span>&#125;,<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;巴基斯坦坠机事件2人生还！幸存者：被火海包围 人们..&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667565408074998538&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;17:59&quot;</span>&#125;,<br>&#123;<span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;里昂主席：西班牙患者更多却能复赛，我们法国真是太蠢..&quot;</span>, <span class="hljs-attr">&quot;link&quot;</span>: <span class="hljs-string">&quot;http://baijiahao.baidu.com/s?id=1667563640465920816&quot;</span>, <span class="hljs-attr">&quot;time&quot;</span>: <span class="hljs-string">&quot;17:31&quot;</span>&#125;,<br>]<br></code></pre></td></tr></table></figure>
<h2 id="附：中文乱码"><a href="#附：中文乱码" class="headerlink" title="附：中文乱码"></a>附：中文乱码</h2><p>如果结果中文乱码，则需要在<code>settings.py</code>中添加如下配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">FEED_EXPORT_ENCODING = <span class="hljs-string">&#x27;utf-8&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Orcale日常记录</title>
    <url>/p/3PN2K8A.html</url>
    <content><![CDATA[<p>记录一下有关Orcale数据库的一些用法。</p>
<a id="more"></a>

<h1 id="建立用户和Scheme"><a href="#建立用户和Scheme" class="headerlink" title="建立用户和Scheme"></a>建立用户和Scheme</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span>SPACE HBSLH_DBSPACE DATAFILE <span class="hljs-string">&#x27;/home/oracle/app/oradata/orcl/dbspace_hbslh.dbf&#x27;</span> SIZE <span class="hljs-number">2000</span>M AUTOEXTEND <span class="hljs-keyword">ON</span> EXTENT MANAGEMENT <span class="hljs-keyword">LOCAL</span> SEGMENT SPACE MANAGEMENT AUTO;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> HBS_LH IDENTIFIED <span class="hljs-keyword">BY</span> CWPASS <span class="hljs-keyword">DEFAULT</span> TABLESPACE HBSLH_DBSPACE;<br></code></pre></td></tr></table></figure>
<h1 id="SQL回滚"><a href="#SQL回滚" class="headerlink" title="SQL回滚"></a>SQL回滚</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> SW_WRW_DQWRPFL <span class="hljs-keyword">as</span> <span class="hljs-keyword">of</span> <span class="hljs-type">timestamp</span> to_timestamp(<span class="hljs-string">&#x27;2018-08-21 17:00:00&#x27;</span>, <span class="hljs-string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> SW_WRW_DQWRPFL enable <span class="hljs-type">row</span> movement;<br>flashback <span class="hljs-keyword">table</span> SW_WRW_DQWRPFL <span class="hljs-keyword">to</span> <span class="hljs-type">timestamp</span> TO_TIMESTAMP(<span class="hljs-string">&#x27;2018-08-21 17:00:00&#x27;</span>, <span class="hljs-string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>);<br></code></pre></td></tr></table></figure>
<h1 id="查询锁与解锁"><a href="#查询锁与解锁" class="headerlink" title="查询锁与解锁"></a>查询锁与解锁</h1><h2 id="查询锁"><a href="#查询锁" class="headerlink" title="查询锁"></a>查询锁</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> v$lock;<br><span class="hljs-comment">--或</span><br><span class="hljs-keyword">select</span> object_name, machine, s.sid, s.serial#<br><span class="hljs-keyword">from</span> v$locked_object l,<br>     dba_objects o,<br>     v$session s<br><span class="hljs-keyword">where</span> l.object_id <span class="hljs-operator">=</span> o.object_id <span class="hljs-keyword">and</span> l.session_id<span class="hljs-operator">=</span>s.sid;<br></code></pre></td></tr></table></figure>
<h2 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h2><p>‘Session id, serial id’</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">system</span> kill session <span class="hljs-string">&#x27;165,4528&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Orcale</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>各种主键生成方法介绍以及生成优缺点对比</title>
    <url>/p/34QH0JS.html</url>
    <content><![CDATA[<p>一个系统各个表中必须要存在一列来存放唯一主键ID，并且如果这个系统是分布式的，有多个分布数据库还需要保证每个数据库中的id不能重复，这就要求需要唯一ID的特性：</p>
<ol>
<li>整个系统ID唯一</li>
<li>ID是数字类型，而且是趋势递增的</li>
<li>ID简短，查询效率快</li>
</ol>
<p>生成ID的方式有多种，大厂肯定用的没这么简单，但是咱们小系统用一下还是绰绰有余的，下面逐一介绍。</p>
<a id="more"></a>

<h1 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h1><p>这个是最大众的方案，直接用工具类方法生成一个uuid。</p>
<p>优点：</p>
<ol>
<li>代码实现简单。</li>
<li>本机生成，没有性能问题</li>
<li>因为是全球唯一的ID，所以迁移数据容易</li>
</ol>
<p>缺点：</p>
<ol>
<li>每次生成的ID是无序的，无法保证趋势递增</li>
<li>UUID的字符串存储，查询效率慢</li>
<li>存储空间大</li>
<li>ID本事无业务含义，不可读</li>
</ol>
<p>应用场景：</p>
<ol>
<li>类似生成token令牌的场景</li>
<li>不适用一些要求有趋势递增的ID场景</li>
</ol>
<h1 id="MySQL主键自增"><a href="#MySQL主键自增" class="headerlink" title="MySQL主键自增"></a>MySQL主键自增</h1><p>这个方法也是很普遍用到的，设置简单，利用了mysql的主键自增auto_increment，默认每次ID加1。</p>
<p>优点：</p>
<ol>
<li>数字化，id递增</li>
<li>查询效率高</li>
<li>具有一定的业务可读</li>
</ol>
<p>缺点：</p>
<ol>
<li>存在单点问题，如果mysql挂了，就没法生成iD了</li>
<li>数据库压力大，高并发抗不住</li>
</ol>
<h1 id="MySQL多实例主键自增"><a href="#MySQL多实例主键自增" class="headerlink" title="MySQL多实例主键自增"></a>MySQL多实例主键自增</h1><p><img src="https://file.moetu.org/images/2020/01/10/a80b93ea7dbc4f4e9413b040765fc8686e33c8ad65de12fd.jpg" alt="MySQL多实例主键自增"></p>
<p>每台的初始值分别为1,2,3…N，步长为N（这个案例步长为4）</p>
<p>优点：解决了单点问题</p>
<p>缺点：一旦把步长定好后，就无法扩容；而且单个数据库的压力大，数据库自身性能无法满足高并发</p>
<p>应用场景：数据不需要扩容的场景</p>
<h1 id="雪花snowflake算法"><a href="#雪花snowflake算法" class="headerlink" title="雪花snowflake算法"></a>雪花snowflake算法</h1><p>雪花算法生成64位的二进制正整数，然后转换成10进制的数。64位二进制数由如下部分组成：</p>
<p><img src="https://file.moetu.org/images/2020/01/10/c7cc4ea5a0b842319d278aa2adcf1036d969dfd2c4c9b6ef.jpg" alt="雪花snowflake算法"></p>
<ul>
<li>1位标识符：始终是0</li>
<li>41位时间戳：41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截 )得到的值，这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的</li>
<li>10位机器标识码：可以部署在1024个节点，如果机器分机房（IDC）部署，这10位可以由 5位机房ID + 5位机器ID 组成</li>
<li>12位序列：毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号</li>
</ul>
<p>实现方式Java版：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Twitter_Snowflake&lt;br&gt;</span><br><span class="hljs-comment"> * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;</span><br><span class="hljs-comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</span><br><span class="hljs-comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;</span><br><span class="hljs-comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span><br><span class="hljs-comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;</span><br><span class="hljs-comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;</span><br><span class="hljs-comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;</span><br><span class="hljs-comment"> * 加起来刚好64位，为一个Long型。&lt;br&gt;</span><br><span class="hljs-comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SnowflakeIdWorker</span> </span>&#123;<br><br>	<span class="hljs-comment">// ==============================Fields===========================================</span><br>	<span class="hljs-comment">/** 开始时间截 (2015-01-01) */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> twepoch = <span class="hljs-number">1420041600000L</span>;<br><br>	<span class="hljs-comment">/** 机器id所占的位数 */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> workerIdBits = <span class="hljs-number">5L</span>;<br><br>	<span class="hljs-comment">/** 数据标识id所占的位数 */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> datacenterIdBits = <span class="hljs-number">5L</span>;<br><br>	<span class="hljs-comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> maxWorkerId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br><br>	<span class="hljs-comment">/** 支持的最大数据标识id，结果是31 */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> maxDatacenterId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits);<br><br>	<span class="hljs-comment">/** 序列在id中占的位数 */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> sequenceBits = <span class="hljs-number">12L</span>;<br><br>	<span class="hljs-comment">/** 机器ID向左移12位 */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> workerIdShift = sequenceBits;<br><br>	<span class="hljs-comment">/** 数据标识id向左移17位(12+5) */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;<br><br>	<span class="hljs-comment">/** 时间截向左移22位(5+5+12) */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;<br><br>	<span class="hljs-comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> sequenceMask = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br><br>	<span class="hljs-comment">/** 工作机器ID(0~31) */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerId;<br><br>	<span class="hljs-comment">/** 数据中心ID(0~31) */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterId;<br><br>	<span class="hljs-comment">/** 毫秒内序列(0~4095) */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequence = <span class="hljs-number">0L</span>;<br><br>	<span class="hljs-comment">/** 上次生成ID的时间截 */</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> lastTimestamp = -<span class="hljs-number">1L</span>;<br><br>	<span class="hljs-comment">//==============================Constructors=====================================</span><br>	<span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * 构造函数</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@param</span> workerId 工作ID (0~31)</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@param</span> datacenterId 数据中心ID (0~31)</span><br><span class="hljs-comment">	 */</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SnowflakeIdWorker</span><span class="hljs-params">(<span class="hljs-keyword">long</span> workerId, <span class="hljs-keyword">long</span> datacenterId)</span> </span>&#123;<br>		<span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br>			<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(String.format(<span class="hljs-string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));<br>		&#125;<br>		<span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>) &#123;<br>			<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(String.format(<span class="hljs-string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));<br>		&#125;<br>		<span class="hljs-keyword">this</span>.workerId = workerId;<br>		<span class="hljs-keyword">this</span>.datacenterId = datacenterId;<br>	&#125;<br><br>	<span class="hljs-comment">// ==============================Methods==========================================</span><br>	<span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * 获得下一个ID (该方法是线程安全的)</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@return</span> SnowflakeId</span><br><span class="hljs-comment">	 */</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">long</span> <span class="hljs-title">nextId</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">long</span> timestamp = timeGen();<br><br>		<span class="hljs-comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span><br>		<span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br>			<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<br>					String.format(<span class="hljs-string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));<br>		&#125;<br><br>		<span class="hljs-comment">//如果是同一时间生成的，则进行毫秒内序列</span><br>		<span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br>			sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br>			<span class="hljs-comment">//毫秒内序列溢出</span><br>			<span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123;<br>				<span class="hljs-comment">//阻塞到下一个毫秒,获得新的时间戳</span><br>				timestamp = tilNextMillis(lastTimestamp);<br>			&#125;<br>		&#125;<br>		<span class="hljs-comment">//时间戳改变，毫秒内序列重置</span><br>		<span class="hljs-keyword">else</span> &#123;<br>			sequence = <span class="hljs-number">0L</span>;<br>		&#125;<br><br>		<span class="hljs-comment">//上次生成ID的时间截</span><br>		lastTimestamp = timestamp;<br><br>		<span class="hljs-comment">//移位并通过或运算拼到一起组成64位的ID</span><br>		<span class="hljs-keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="hljs-comment">//</span><br>				| (datacenterId &lt;&lt; datacenterIdShift) <span class="hljs-comment">//</span><br>				| (workerId &lt;&lt; workerIdShift) <span class="hljs-comment">//</span><br>				| sequence;<br>	&#125;<br><br>	<span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * 阻塞到下一个毫秒，直到获得新的时间戳</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@param</span> lastTimestamp 上次生成ID的时间截</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@return</span> 当前时间戳</span><br><span class="hljs-comment">	 */</span><br>	<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">long</span> <span class="hljs-title">tilNextMillis</span><span class="hljs-params">(<span class="hljs-keyword">long</span> lastTimestamp)</span> </span>&#123;<br>		<span class="hljs-keyword">long</span> timestamp = timeGen();<br>		<span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>			timestamp = timeGen();<br>		&#125;<br>		<span class="hljs-keyword">return</span> timestamp;<br>	&#125;<br><br>	<span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * 返回以毫秒为单位的当前时间</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@return</span> 当前时间(毫秒)</span><br><span class="hljs-comment">	 */</span><br>	<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">long</span> <span class="hljs-title">timeGen</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">return</span> System.currentTimeMillis();<br>	&#125;<br><br>	<span class="hljs-comment">//==============================Test=============================================</span><br>	<span class="hljs-comment">/** 测试 */</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		SnowflakeIdWorker idWorker = <span class="hljs-keyword">new</span> SnowflakeIdWorker(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>			<span class="hljs-keyword">long</span> id = idWorker.nextId();<br>			System.out.println(Long.toBinaryString(id));<br>			System.out.println(id);<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>优点：</p>
<ol>
<li>此方案每秒能够产生409.6万个ID，性能快</li>
<li>时间戳在高位，自增序列在低位，整个ID是趋势递增的，按照时间有序递增</li>
<li>灵活度高，可以根据业务需求，调整bit位的划分，满足不同的需求</li>
</ol>
<p>缺点：</p>
<ol>
<li>依赖机器的时钟，如果服务器时钟回拨，会导致重复ID生成</li>
</ol>
<p>在分布式场景中，服务器时钟回拨会经常遇到，一般存在10ms之间的回拨；小伙伴们就说这点10ms，很短可以不考虑吧。但此算法就是建立在毫秒级别的生成方案，一旦回拨，就很有可能存在重复ID。</p>
<h1 id="Redis生成方案"><a href="#Redis生成方案" class="headerlink" title="Redis生成方案"></a>Redis生成方案</h1><p>利用redis的incr原子性操作自增，一般算法为：年份 + 当天距当年第多少天 + 天数 + 小时 + redis自增</p>
<p>优点：有序递增，可读性强</p>
<p>缺点：占用带宽，每次要向redis进行请求</p>
<blockquote>
<p>参考：</p>
<ol>
<li><a href="https://www.toutiao.com/i6682195317716156942/">老顾聊技术-你想了解一线大厂的分布式唯一ID生成方案吗？</a></li>
<li><a href="https://www.cnblogs.com/relucent/p/4955340.html">永夜微光-Twitter的分布式自增ID算法snowflake (Java版)</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>开发</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SQL</tag>
        <tag>UUID</tag>
      </tags>
  </entry>
  <entry>
    <title>在macOS上运用Crontab运行定时任务</title>
    <url>/p/11CFSV5.html</url>
    <content><![CDATA[<blockquote>
<p>在电脑上运行脚本固然好，但是如果能定时运行，那最好了。</p>
</blockquote>
<p>通过创建Crontab，可以在macOS上运行定时任务！让我们做一个示例。</p>
<p>假设您要运行一个名为<code>work.sh</code>的脚本，该脚本可以为您完成一些工作——脚本实际上运行了什么不重要。 但是你每天要花费几分钟来运行这个脚本，大大浪费了时间，这完全可以交给定时任务来完成。</p>
<a id="more"></a>

<h1 id="第一步：确保脚本正常"><a href="#第一步：确保脚本正常" class="headerlink" title="第一步：确保脚本正常"></a>第一步：确保脚本正常</h1><p>首先，确保<code>work.sh</code>能正常运行，并且把它放在一个固定的地方，比如，我就放在了<code>~/.script</code>目录下。</p>
<h1 id="第二步：配置定时任务"><a href="#第二步：配置定时任务" class="headerlink" title="第二步：配置定时任务"></a>第二步：配置定时任务</h1><p>然后，启动终端（Terminal），运行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">crontab -e<br></code></pre></td></tr></table></figure>
<p>会为你用<code>vim</code>打开一个文本，如果你之前没有配置过定时任务，那文本内容应该是空的，只有一个行号”1”。</p>
<p>然后按<code>i</code>进入<code>vim</code>的编辑模式，输入cron表达式和要执行的命令。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">* * * * * command<br></code></pre></td></tr></table></figure>
<p>比如：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">0,15,30,45 * * * * cd ~/.scripts &amp;&amp; ./work.sh<br></code></pre></td></tr></table></figure>
<h1 id="第三步：保存、测试"><a href="#第三步：保存、测试" class="headerlink" title="第三步：保存、测试"></a>第三步：保存、测试</h1><p>最后，按<code>esc</code>退出到<code>vim</code>的命令模式，输入命令<code>wq!</code>保存退出。然后等待定时任务执行，查看结果。</p>
<h1 id="附录：Cron表达式"><a href="#附录：Cron表达式" class="headerlink" title="附录：Cron表达式"></a>附录：Cron表达式</h1><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">* * * * *<br></code></pre></td></tr></table></figure>
<p>解释：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">* - 分钟 (0-59)<br>* - 小时 (0-23)<br>* - 天 (1-31)<br>* - 月 (1-12)<br>* - 星期 (0-6, 0 是星期天)<br>(从左到右边)<br></code></pre></td></tr></table></figure>
<p>可以通过<a href="https://crontab.guru/">Crontab.guru</a>生成Cron表达式</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Element输入框自动去除空格及校验</title>
    <url>/p/2KGC076.html</url>
    <content><![CDATA[<p>有的时候需要用输入框输入数据，但是需要数据去除前后空格</p>
<a id="more"></a>

<p>可以自定义一个指令，代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br>Vue.directive(<span class="hljs-string">&#x27;trim&#x27;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el, binding, vnode</span>)</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> validateField = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">const</span> formItem = vnode.elm.parentNode.parentNode.__vue__<br>      <span class="hljs-keyword">if</span> (formItem) &#123;<br>        validateField = formItem.$options.propsData.prop<br>      &#125;<br>      <span class="hljs-keyword">const</span> form = vnode.elm.parentNode.parentNode.parentNode.__vue__<br>      <span class="hljs-keyword">const</span> trimStr = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-keyword">const</span> value = e.target.value<br>        <span class="hljs-keyword">if</span> (value) &#123;<br>          e.target.value = value.trim()<br>          e.target.dispatchEvent(<span class="hljs-keyword">new</span> CustomEvent(<span class="hljs-string">&#x27;input&#x27;</span>))<br>          <span class="hljs-keyword">if</span> (form &amp;&amp; validateField) &#123;<br>            form.validateField(validateField)<br>          &#125;<br>        &#125;<br>      &#125;<br>      vnode.elm.__vue__.$refs.input.addEventListener(<span class="hljs-string">&#x27;blur&#x27;</span>, trimStr)<br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>使用的时候只需要在<code>el-input</code>标签上添加<code>v-trim</code>属性即可。</p>
<p>效果是在input失去焦点的时候，自动把输入的值前后空格去掉，如果输入框有校验，则去掉后触发校验。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 14 新功能预料大合集</title>
    <url>/p/2RSHAR.html</url>
    <content><![CDATA[<p>iOS14还有几天就能与大家在WWDC20(6月22日)上见面了，苹果一直在加利福尼亚的库比蒂诺总部研发该系统，并且适用设备据说与iOS13相同。本文汇总并且根据功能分类了“自古以来”有关iOS14新功能的爆料。</p>
<a id="more"></a>

<p><img src="https://file.moetu.org/images/2020/06/10/15917802163319ce777f170baba2e6.jpg" alt="iOS 14"></p>
<blockquote>
<p>由于供应商内部交易，早期的预览版iOS14系统或许已经被泄漏，有些爆料达人可以从泄漏版本中发现一些新功能，不过也有许多未知的功能没有被发掘出来，好比每次iOS大更新都会在发版日志中写明更新了啥，但是很多小功能的更新改进不会被列出来（大厂就是大厂）。</p>
</blockquote>
<p>据说 iOS14 的开发流程有了很大<br>改进，这种改善可以大大减少开发以及测试的错误率，并且允许测试人员单独关闭或者打开系统中的某些功能来进行对某一项功能的细致测试，这就导致了在Beta版本出现的功能可能会在正式版中砍掉，也有可能测试版中没有的功能在正式版中出现，具有有哪些功能还得看正式版的更新。</p>
<h2 id="iOS-14-发布日期"><a href="#iOS-14-发布日期" class="headerlink" title="iOS 14 发布日期"></a>iOS 14 发布日期</h2><p>根据以往经验来说，苹果一般会在WWDC上发布新系统，WWDC20的时间已经定在6月22日，并且是头一次线上虚拟发布会。随着发布会发布会接着发布开发者预览版和公众预览版，最后在秋季推送正式版，心急的小伙伴可以到时候下载开发者测试版尝试。</p>
<h2 id="主屏幕"><a href="#主屏幕" class="headerlink" title="主屏幕"></a>主屏幕</h2><p>苹果万年不变的主屏幕难道终于要变了？据爆料，iOS14 的主屏幕会像 Apple Watch 一样，可以变成列表显示，不再仅仅局限于网格排列。列表显示会列出所有安装在iPhone上的应用，并且可以根据首字母排序，用户还可以根据类别和有无未读通知来对应用进行过滤。</p>
<p><img src="https://file.moetu.org/images/2020/06/10/159177736709314aa38d32dac4ed4a.jpg" alt="主屏幕"></p>
<p>iOS14 还可能提供主屏幕小部件选项（类似早年的Windows Phone？），该选项允许小部件可以像主屏幕上的应用程序图标一样自由移动。 目前尚无此功能的详细信息，但在 iOS14 的代码中可以看出，向右滑动时，它与通知中心“今日”部分中可用的小部件有明显不同。</p>
<h2 id="新增的App以及对现有App的调整"><a href="#新增的App以及对现有App的调整" class="headerlink" title="新增的App以及对现有App的调整"></a>新增的App以及对现有App的调整</h2><h3 id="Fitness-App"><a href="#Fitness-App" class="headerlink" title="Fitness App"></a>Fitness App</h3><p>与现有“健身应用”不同（虽然中文翻译和现有的相同），这个 Fitness App 更像是 Seven 或者 Keep，可以在多平台运行，包括iPhone、Apple Watch、Apple TV，用户可以通过App下载健身视频，根据视频来引导锻炼。</p>
<p><img src="https://file.moetu.org/images/2020/06/10/159176889789100accbdef16edca36.jpg" alt="Fitness App"></p>
<p>用户佩戴 Apple Watch 可以跟踪锻炼程序的进度，将有各种不同的锻炼类型，包括室内跑步，骑自行车，划船，伸展运动，核心训练，力量训练，户外散步，舞蹈和瑜伽。</p>
<h3 id="信息App"><a href="#信息App" class="headerlink" title="信息App"></a>信息App</h3><p>苹果正在测试iMessage的新功能，并会在 iOS14 上推出。还有研究表明苹果正在开发基于 Catalyst 的信息App，就说明很多功能在手机平板和电脑上通用。</p>
<h5 id="艾特“-”联系人"><a href="#艾特“-”联系人" class="headerlink" title="艾特“@”联系人"></a>艾特“@”联系人</h5><p>其中一项功能是“@”功能，类似微信和QQ，可以在iMessage中“@”自己的联系人，如果静音了iMessage群聊，自己被“@”时可以收到消息提醒，功能基本和微信一样。</p>
<p><img src="https://file.moetu.org/images/2020/06/10/1591769153959395ebe2495d725636.jpg" alt="艾特“@”联系人"></p>
<h4 id="撤回消息"><a href="#撤回消息" class="headerlink" title="撤回消息"></a>撤回消息</h4><p>另一个功能是“撤回”，还是和微信QQ类似，用户可以发送iMessage消息后选择撤回该消息，撤回后双方均不可见。</p>
<p><img src="https://file.moetu.org/images/2020/06/10/15917692422799f352529b0354efed.jpg" alt="撤回消息"></p>
<h4 id="“正在输入…”指示器"><a href="#“正在输入…”指示器" class="headerlink" title="“正在输入…”指示器"></a>“正在输入…”指示器</h4><p>在群聊中会提示哪些用户正在输入，而且会添加“<code>/me</code>”命令，仅限与Mac，具体有什么作用现在还不清楚。这一部分的改进跟 Telegram 功能差不多。</p>
<p><img src="https://file.moetu.org/images/2020/06/10/15917695006363ef586b9eaa7c951d.jpg" alt="正在输入"></p>
<h4 id="标记为未读"><a href="#标记为未读" class="headerlink" title="标记为未读"></a>标记为未读</h4><p>用户可以将某个对话标记为未读，没有什么可解释的，大部分聊天App都具有的功能。</p>
<p><img src="https://file.moetu.org/images/2020/06/10/15917695638779fab693a2a05aae98.jpg" alt="标记为未读"></p>
<h3 id="手表上的-Activity-App"><a href="#手表上的-Activity-App" class="headerlink" title="手表上的 Activity App"></a>手表上的 Activity App</h3><p>watchOS 7 会带来儿童模式（儿童也可以带Apple Watch啦？），并且健身应用也有儿童模式，儿童模式的健身应用不会记录消耗卡路里消耗，而是记录运动时间，这是对儿童而言更健康的指标（也是，小孩哪有那么多力气？）。</p>
<h3 id="新的AR应用（扫码）"><a href="#新的AR应用（扫码）" class="headerlink" title="新的AR应用（扫码）"></a>新的AR应用（扫码）</h3><p>新的AR应用的内部代码是“Gobi”，用户可以用该应用扫描二维码、苹果码之类的码来获取信息，用苹果的原画说是 “get more information about the world around them”，自己细细品。</p>
<p><img src="https://file.moetu.org/images/2020/06/10/15917701201694758ad144be15a3de.jpg" alt="QR Codes"></p>
<p>这种新AR应用还可能被广泛应用到苹果店和星巴克店内，用户举起手机扫描店内的二维码就能查看正在销售的苹果设备信息或者是星巴克点餐，并且与AirTag相结合带来更多便捷的体验。</p>
<h3 id="设置默认应用"><a href="#设置默认应用" class="headerlink" title="设置默认应用"></a>设置默认应用</h3><p>这种功能Android上早就有了，从iOS 14开始，Apple可能允许 iPhone 和 iPad 用户将第三方邮件，浏览器和音乐应用程序设置为默认设置，而不是Apple自己的应用程序，因此点击链接或电子邮件地址不会打开 Apple 自己的应用。 这项更改还可以让用户在Homepod上用Siri控制第三方音乐软件，目前仅能控制Apple Music。</p>
<p>苹果内部批评说自己的应用比第三方的更有优势，因为自己的应用默认安装，并且打开链接啥的都是跳转自己的应用，这导致不公平竞争，苹果正在致力于改善这种状况。</p>
<h3 id="健康App-——-睡眠监测"><a href="#健康App-——-睡眠监测" class="headerlink" title="健康App —— 睡眠监测"></a>健康App —— 睡眠监测</h3><p>传言称，下一代Apple Watch的睡眠跟踪功能将与iPhone上的Health应用程序集成，用户可以在其中设置个性化的睡眠目标。 Health应用程序还将提供改善睡眠的建议。（难道可以抛弃AutoSleep了？）</p>
<h3 id="相册App-——-集成“Shot-on-iPhone”挑战"><a href="#相册App-——-集成“Shot-on-iPhone”挑战" class="headerlink" title="相册App —— 集成“Shot on iPhone”挑战"></a>相册App —— 集成“Shot on iPhone”挑战</h3><p>有了这功能，苹果会不定期的举办比赛，并在相册App中开放提交作品的提示入口，想参赛的用户可以直接在相册App上提交参赛作品，获胜者会获得现金奖励（直接存入Apple Cash？）。</p>
<h3 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h3><p>iOS14 的Safari浏览器会内置翻译功能，类似Chrome，直接翻译全网页。可以设定哪些网站进行翻译，也可以直接打开全部网站自动翻译。</p>
<p>iPadOS上的Safari浏览器会完全支持Apple Pencil，包括标记、缩放和上下滚动。</p>
<h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><p>苹果或许正在开发可以在iPadOS上面运行的Xcode软件。（Xcode：开发苹果App的软件）</p>
<h3 id="Find-My-App"><a href="#Find-My-App" class="headerlink" title="Find My App"></a>Find My App</h3><p>“查找我的”App会新增一项通知功能，设定某个联系人没有在在预定时间内到达特定地方，会发出报警通知。这样父母可以为孩子上学设定通知，如果孩子没有在截止日期之前到达学校，则会发送警报。（逃课？蓝瘦。）</p>
<h3 id="CarPlay"><a href="#CarPlay" class="headerlink" title="CarPlay"></a>CarPlay</h3><p>iOS 14中的CarPlay可以支持自定义墙纸，在CarPlay界面上显示墙纸。 这些墙纸还将根据一天中的时间在亮和暗模式之间切换。</p>
<h3 id="CarKey"><a href="#CarKey" class="headerlink" title="CarKey"></a>CarKey</h3><p>在iOS 13.4中就发现了新的“CarKey” API的提示，这意味着iPhone可以用于锁定，解锁和启动具有NFC功能的汽车。 共享功能还将可用于通过“消息”应用程序将密钥分配给朋友和家人。</p>
<p>CarKey可能会成为 iOS14 功能，它将允许 iPhone 所有者使用其设备代替实体的汽车钥匙。 据iOS14中的代码显示，宝马可能会成为第一批合作伙伴之一。</p>
<p><img src="https://file.moetu.org/images/2020/06/10/15917714449109f37e1db416d6c9dd.jpg" alt="CarKey"></p>
<h3 id="Apple-Maps"><a href="#Apple-Maps" class="headerlink" title="Apple Maps"></a>Apple Maps</h3><p>Apple Maps会提供更多的商店商场信息，比如某些企业提供的信息，或者某些苹果店的特定天才吧服务，又或者iMax影院的放映信息等等，反正信息会更加完善丰富。</p>
<h2 id="iCloud-Keychain"><a href="#iCloud-Keychain" class="headerlink" title="iCloud Keychain"></a>iCloud Keychain</h2><p>在 iOS14 中，无论什么时候你用相同的密码登陆另一个网站，iCloud Keychain 都会进行警告，这将有助于鼓励用户为每次登录选择不同的密码。</p>
<p><img src="https://file.moetu.org/images/2020/06/10/159177171492511c53443233ddcd6f.jpg" alt="iCloud Keychain"></p>
<p>iCloud Keychain 或许还支持双重验证2FA，类似 1Password 支持生成双重验证动态码和自动填充。</p>
<h2 id="Clips"><a href="#Clips" class="headerlink" title="Clips"></a>Clips</h2><p>Apple正在开发一项新功能，该功能使用户可以通过代号为“Clips”的功能与第三方应用程序中的选定内容和体验进行交互，而无需安装这些应用程序。</p>
<p>“Clips”旨在允许用户链接到应用程序的QR码，然后通过屏幕上的浮动卡与该应用程序的内容进行交互。 通过该卡可以从AppStore下载完整的应用程序，或在已安装的应用程序中打开特定的内容。</p>
<p>据说苹果正在 OpenTable, Yelp, DoorDash, YouTube, 和 Sony 的 PS4 Second Screen app 上测试该功能。</p>
<h2 id="Apple-Pencil"><a href="#Apple-Pencil" class="headerlink" title="Apple Pencil"></a>Apple Pencil</h2><p>PencilKit的一项新功能允许用户在任何可以打字的输入框上使用Apple Pencil手写文字，然后识别填入，类似于中文手写输入法。该功能似乎可与iOS中的任何文本输入字段一起使用，从而使其与消息，便笺，提醒，邮件等兼容。</p>
<h2 id="HomeKit-更新"><a href="#HomeKit-更新" class="headerlink" title="HomeKit 更新"></a>HomeKit 更新</h2><h3 id="灯光的-Night-Shift"><a href="#灯光的-Night-Shift" class="headerlink" title="灯光的 Night Shift"></a>灯光的 Night Shift</h3><p>灯光的 Night Shift 可以根据时间调节灯光的色温，白天的时候会是冷色温，晚上变成暖色温。</p>
<h3 id="相机面部识别"><a href="#相机面部识别" class="headerlink" title="相机面部识别"></a>相机面部识别</h3><p>全新的 HomeKit 安全视频功能增加了人员识别功能，这也许可使安全摄像机检测到特定人员，从而将家庭中的人员与陌生人区分开。 HomeKit 安全视频已经支持对象识别，例如人，动物和车辆。</p>
<h2 id="其他更新"><a href="#其他更新" class="headerlink" title="其他更新"></a>其他更新</h2><h3 id="可自定义的语音合成器"><a href="#可自定义的语音合成器" class="headerlink" title="可自定义的语音合成器"></a>可自定义的语音合成器</h3><p>苹果似乎正在探索让开发人员通过名为VoiceProvider的新框架在iOS上提供自定义语音合成器的方法。<br>语音合成器扩展将与App Store中的应用程序捆绑在一起，然后可用于替换默认语音，该功能可能对于Apple不支持的语言和方言很重要。</p>
<h3 id="第三方壁纸包"><a href="#第三方壁纸包" class="headerlink" title="第三方壁纸包"></a>第三方壁纸包</h3><p>苹果可能计划在iOS14中引入对第三方墙纸包的支持，这将使开发人员能够为iPhone创建墙纸选项，这些选项可以通过“设置”中的“墙纸”进行安装。</p>
<p><img src="https://file.moetu.org/images/2020/06/10/1591777743225922042dce7f638c16.jpg" alt="第三方壁纸包"></p>
<p>据说苹果正在致力于把墙纸分类，这将使用户能够更好地分类墙纸。</p>
<h3 id="辅助功能更新"><a href="#辅助功能更新" class="headerlink" title="辅助功能更新"></a>辅助功能更新</h3><p>每次大版本iOS更新少不了辅助功能的更新。爆料出的第一个功能是将为有听力障碍的人检测火灾警报，门铃，门铃等声音。另一个被爆料出的功能是可以让相机检测手势，来对音频进行调节的功能，以改善轻度至中度听力损失者的 AirPods 或 EarPods 的音频调音。</p>
<h2 id="iOS-14-和-iPadOS-14-支持的设备"><a href="#iOS-14-和-iPadOS-14-支持的设备" class="headerlink" title="iOS 14 和 iPadOS 14 支持的设备"></a>iOS 14 和 iPadOS 14 支持的设备</h2><p>有传言称，iOS 14 支持所有 iOS 13 设备：</p>
<ul>
<li>iPhone 11 Pro</li>
<li>iPhone SE (2020)</li>
<li>iPhone 11 Pro Max</li>
<li>iPhone 11</li>
<li>iPhone XS</li>
<li>iPhone XS Max</li>
<li>iPhone XR</li>
<li>iPhone X</li>
<li>iPhone 8</li>
<li>iPhone 8 Plus</li>
<li>iPhone 7</li>
<li>iPhone 7 Plus</li>
<li>iPhone 6s</li>
<li>iPhone 6s Plus</li>
<li>iPhone SE (2016)</li>
<li>iPod touch (7th generation)</li>
</ul>
<p>在iPad方面，iPadOS 14 支持大部分 iOS 13 设备，但是iPad mini 4 (发布于2015年9月) 和 iPad Air 2 (发布于2014年10月）不支持。所以iPad方面如果传言正确的话，支持以下设备：</p>
<ul>
<li>12.9-inch iPad Pro</li>
<li>11-inch iPad Pro</li>
<li>10.5-inch iPad Pro</li>
<li>9.7-inch iPad Pro</li>
<li>iPad (7th generation)</li>
<li>iPad (6th generation)</li>
<li>iPad (5th generation)</li>
<li>iPad mini (5th generation)</li>
<li>iPad Air (3rd generation)</li>
</ul>
<blockquote>
<p>关注”家有Apple”公众号，获取更多Apple资讯。<br><img src="https://file.moetu.org/images/2020/06/10/AppleInHomef80951724f2257d2.png" alt="AppleInHome"></p>
</blockquote>
]]></content>
      <categories>
        <category>日常</category>
        <category>Apple</category>
      </categories>
      <tags>
        <tag>HomeKit</tag>
        <tag>Android</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>[202006期] 有价值 iOS App</title>
    <url>/p/2S9K9NA.html</url>
    <content><![CDATA[<p>AppStore上的游戏和应用程序很多，能找到一款好的软件或者游戏实属不容易，这一期给大家推荐几款实用软件和有意思的游戏。</p>
<a id="more"></a>

<h2 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a><strong>Tasks</strong></h2><ul>
<li>下载地址：<a href="https://apps.apple.com/app/tasks-stay-ahead/id1502903102">https://apps.apple.com/app/tasks-stay-ahead/id1502903102</a></li>
<li>价格：免费</li>
<li>应用内购买：有</li>
</ul>
<p><img src="https://file.moetu.org/images/2020/06/11/Tasksd33ec320a6791c34.png" alt="Tasks"></p>
<p>Tasks是一个待办事项应用程序，可让您随时随地创建需要处理的任务。 您可以将生活中的各项待办事项组织成不同的类别，例如“家庭”，“家庭”，“工作”等等，而且还能设置子任务，使得软件可以用于管理项目。Tasks可以根据任务的创建循序或或者任务到期时间进行排序整理，除此之外还有很多功能，例如标签，多用户支持，日期检测，图像支持等等。 Tasks是款免费软件，但要解锁高级功能则需要进行应用内购买。</p>
<h2 id="New-on-Flix"><a href="#New-on-Flix" class="headerlink" title="New on Flix"></a>New on Flix</h2><ul>
<li>下载地址：<a href="https://apps.apple.com/us/app/new-on-netflix/id1510913159">https://apps.apple.com/us/app/new-on-netflix/id1510913159</a></li>
<li>价格：免费</li>
<li>应用内购买：有</li>
</ul>
<p><img src="https://file.moetu.org/images/2020/06/11/New-on-Flix2913d199b90c1272.png" alt="New on Flix"></p>
<p>如果您喜欢观看奈飞（Netflix），如果您常常剧荒，不知道看啥，那么这款软件就再适合不过了。它可以帮您寻找Netflix上的新剧集，虽然不是官方软件，但是小巧玲珑，每天展示奈飞上新增的剧集。移除广告需要应用内购买。</p>
]]></content>
      <categories>
        <category>日常</category>
        <category>Apple</category>
      </categories>
      <tags>
        <tag>Netflix</tag>
      </tags>
  </entry>
  <entry>
    <title>CarKey功能预测及介绍</title>
    <url>/p/T5A9FS.html</url>
    <content><![CDATA[<p>苹果的 iPhone 和 Apple Watch 设备已经有 NFC 功能一段时间了，在不久的将来，NFC 功能还可以用于解锁汽车，用户可以通过 iPhone 或者 Apple Watch 来锁定、解锁、启动汽车，从而代替传统的物理钥匙。</p>
<a id="more"></a>

<p><img src="https://file.moetu.org/images/2020/06/17/15923722550190178cd1a80bd5f90d.jpg" alt="CarKey"></p>
<p>苹果称这种新功能叫做 “CarKey”，这就是我们今天介绍的主角。</p>
<h2 id="什么是-CarKey-？"><a href="#什么是-CarKey-？" class="headerlink" title="什么是 CarKey ？"></a>什么是 CarKey ？</h2><p>CarKey 是一种数字协议，可以让配备了NFC功能的 iPhone 和 Apple Watch 解锁、锁定、启动、控制具有 NFC 功能的汽车。</p>
<p>汽车通常上是不具备 NFC 功能的，就像现在已有的 CarPlay 功能一样，需要汽车制造商来适配这种功能。</p>
<p>汽车制造商可以通过 CarKey 功能，实现 iPhone 对汽车的各种各样控制，但是最基本的控制——包括解锁、锁定、启动汽车是必须有的，这让 CarKey 可以代替物理钥匙。</p>
<p>CarKey 工作原理基于汽车联机联盟（CCC）发布的基于 NFC 的 Digital Key 2.0 规范，苹果正是该联盟中的一员。 Digital Key 2.0 规范使得移动设备可以通过 NFC 与交通设备建立安全稳健的链接。</p>
<h2 id="CarKey-如何工作？"><a href="#CarKey-如何工作？" class="headerlink" title="CarKey 如何工作？"></a>CarKey 如何工作？</h2><p>现如今，很多汽车都配备了可以近距离感应解锁汽车的卡片或者钥匙扣，就像特斯拉的钥匙是一张卡片，贴近车门框就能解锁。CarKey就跟这种卡片或者钥匙扣很相似，只不过CarKey是通过 NFC 功能实现的，并且可以将“钥匙”保存在 iPhone 上的“钱包”应用中。</p>
<p>用 CarKey 解锁（或锁定）车辆需要将‌ Apple Watch ‌或 ‌iPhone 靠近汽车的 NFC 感应区。 当 NFC 感应区检测到存储在 iPhone 或 Apple Watch 中的 CarKey 时，汽车中的解锁程序将启动，汽车被解锁。</p>
<p>使用“钱包”中的 CarKey 需要进行面容ID或者指纹解锁，但是苹果也推出一种快捷的方式，类似于快捷交通卡一样，不需要任何解锁即可使用该数字钥匙，从 iOS13 的代码中，苹果有这样一段描述：<br>“要使用 CarKey，请将‌ iPhone‌ 或 ‌Apple Watch‌ 靠近感应区。它会自动运行，不需要面容ID。 您可以在电子钱包中更改快速模式设置。”</p>
<h2 id="CarKey-如何设置？"><a href="#CarKey-如何设置？" class="headerlink" title="CarKey 如何设置？"></a>CarKey 如何设置？</h2><p>‌iOS13 中的代码包含有关 CarKey 设置方式的详细信息。CarKey 用户需要将 iPhone 放在位于车内的 NFC 感应区上，配对过程可能需要几分钟即可完成。</p>
<p>配对过程需要输入汽车制造商提供的配对密钥，有些汽车制造商的配对过程还可能需要下载相应的软件，在iOS中找到了以下描述：</p>
<blockquote>
<p>将此 iPhone 顶部靠近汽车的NFC感应区，配对过程可能需要几分钟，在配对成功之前，请不要移走 iPhone。<br>请输入汽车制造商提供的CarKey密钥，或者下载 $$汽车制造商$$ 的App进行连接。</p>
</blockquote>
<h2 id="CarKey在“钱包”应用中是什么样？"><a href="#CarKey在“钱包”应用中是什么样？" class="headerlink" title="CarKey在“钱包”应用中是什么样？"></a>CarKey在“钱包”应用中是什么样？</h2><p>CarKey在“钱包”中将会是一张卡片，就像交通卡，当你点击卡片的时候，会展示有关汽车的相关信息。</p>
<p><img src="https://file.moetu.org/images/2020/06/10/15917714449109f37e1db416d6c9dd.jpg" alt="CarKey"></p>
<p>也会有一个“快捷解锁模式”（无需面容ID和指纹解锁）的选项，或者与别人分享该 CarKey，分享的 CarKey 可以设定较少的权限，比如不能解锁汽车，只能控制车内空调温度。</p>
<h2 id="我能与别人分享-CarKey-吗？"><a href="#我能与别人分享-CarKey-吗？" class="headerlink" title="我能与别人分享 CarKey 吗？"></a>我能与别人分享 CarKey 吗？</h2><p>答案是肯定的。将会有个选项可以通过“信息”App与别人分享你的 CarKey 数字钥匙，来解锁汽车。这种分享功能很实用，比如去酒店，服务人员代泊车，与亲戚朋友分享汽车，与配偶公用一辆汽车，维修点维修汽车等。</p>
<p>不同的分享权限可以被车主人设定，这就意味着你可以把全部汽车权限分享给别人，也可以分享一部分权限，比如只允许解锁汽车，但是无法启动汽车。分享出去的CarKey有效时间也可以被控制，永久有效或者在某段时间内有效。开发者们从iOS中找到以下描述：</p>
<blockquote>
<p>$$汽车拥有者$$ 邀请您使用他的 $$汽车品牌$$ 汽车的解锁和驾驶权限。您可以使用您的iPhone 或者 Apple Watch 来解锁、锁定、启动、控制汽车。</p>
</blockquote>
<p>CarKey分享具有三种不同等级的权限：解锁汽车、解锁并启动汽车、解锁后备箱。</p>
<p>在“信息”App中可以分享 CarKey 钥匙，就像给对方发送 Apple Cash（国内无此功能） 一样方便，而且，CarKey 只能在私聊中分享，在群聊中是不能分享的。</p>
<p>拥有你汽车 CarKey 密钥的人可以用他们自己的 iPhone 或者 Apple Watch 解锁你的汽车，就像你解锁你自己汽车一样方便。</p>
<h2 id="CarKey-可以在所有汽车上用吗？"><a href="#CarKey-可以在所有汽车上用吗？" class="headerlink" title="CarKey 可以在所有汽车上用吗？"></a>CarKey 可以在所有汽车上用吗？</h2><p>答案是不会。CarKey 只会在具有NFC功能、并且汽车制造商适配了该功能的汽车上使用。</p>
<p>苹果公司正在与汽车制造商合作，而CarKey可能是工厂安装的选件，仅限于新车型。 但是，与“ CarPlay”一样，这种功能可能会是汽车高级版本的选配选项，某一种型号的低配版本可能不会配备。</p>
<p>iOS 中的屏幕截图表明，苹果公司的首批合作伙伴之一将是宝马。 宝马已经支持在 BMW Connected 应用程序中使用 BMW Digital Key 锁定和解锁车辆并启动发动机，并计划将其引入其他平台，比如苹果的 CarKey。</p>
<h2 id="iPhone-没电时-CarKey-会工作吗？"><a href="#iPhone-没电时-CarKey-会工作吗？" class="headerlink" title="iPhone 没电时 CarKey 会工作吗？"></a>iPhone 没电时 CarKey 会工作吗？</h2><p>会。CarKey 基于 NFC，即使 ‌iPhone ‌或 ‌Apple Watch‌ 电池电量过低自动关机，它仍将继续运行。 然而，并非总是可以用没电关机了的 iPhone 来开锁汽车，就像快捷公交卡一样，没电的 iPhone 仍可以刷4次，CarKey 能刷几次还不得而知。</p>
<h2 id="苹果会有我使用CarKey的记录吗？"><a href="#苹果会有我使用CarKey的记录吗？" class="headerlink" title="苹果会有我使用CarKey的记录吗？"></a>苹果会有我使用CarKey的记录吗？</h2><p>不会。Apple 在 iOS13.5.1 中发布了 CarKey 隐私策略。 在设置过程中，为了防止欺诈，将必须输入的一次性兑换令牌与设置时的用户Apple帐户、设备和位置信息一起发送，以将车辆与“钱包”应用程序配对。</p>
<p>唯一的设备标识符将发送给车辆制造商以设置 CarKey。 出于隐私保护目的，标识符对于每个制造商都是唯一的。 苹果公司表示，汽车制造商可以根据制造商的隐私权政策，将设备标识符与有关您的其他信息联系起来。</p>
<p>虽然苹果不保留有关车辆使用情况的信息，但是车辆制造商根据协议了解你的使用记录。这就像使用信用卡，银行怎么会不知道使用记录呢？</p>
<h2 id="CarKey-什么时候可以使用？"><a href="#CarKey-什么时候可以使用？" class="headerlink" title="CarKey 什么时候可以使用？"></a>CarKey 什么时候可以使用？</h2><p>CarKey 何时可用尚无消息。但是在 iOS 13 多个版本中都发现了 CarKey 的更新迹象，因此绝对是Apple积极开发和完善的东西。</p>
<p>由于 iOS14 将于6月进行内测并于秋季推出，因此 CarKey 很有可能被设计为‌ iOS14 ‌功能，Apple 很有可能在 WWDC 上推出该功能。不过，CarKey 依赖于汽车制造商，因此苹果可能需要等汽车制造商适配完成再推出。</p>
<h2 id="CarKey-未来怎样？"><a href="#CarKey-未来怎样？" class="headerlink" title="CarKey 未来怎样？"></a>CarKey 未来怎样？</h2><p>Digital Key 2.0 协议虽然在今年5月刚刚发布，汽车联机联盟（CCC）已经在研究 Digital Key 3.0 协议了，3.0协议将会基于蓝牙LE和超宽带感知，iPhone 11, iPhone 11 Pro, 和 iPhone 11 Pro 支持该超宽带感知功能。该 3.0 规范将允许被动的，位置感知的无钥匙访问，也就是说你靠近汽车，汽车就解锁了。</p>
<blockquote>
<p>关注”家有Apple”公众号，获取更多Apple资讯。<br><img src="https://file.moetu.org/images/2020/06/10/AppleInHomef80951724f2257d2.png" alt="AppleInHome"></p>
</blockquote>
]]></content>
      <categories>
        <category>日常</category>
        <category>Apple</category>
      </categories>
  </entry>
  <entry>
    <title>How to download Wechat on iOS in india</title>
    <url>/p/ESP3TJ.html</url>
    <content><![CDATA[<p>WeChat has been removed from the App Store India, so how can friends in India download WeChat?</p>
<a id="more"></a>

<h2 id="Open-“App-Store”-on-home-screen"><a href="#Open-“App-Store”-on-home-screen" class="headerlink" title="Open “App Store” on home screen."></a>Open “App Store” on home screen.</h2><p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/Untitled.png"></p>
<h2 id="Click-on-the-avatar-in-the-upper-right-corner"><a href="#Click-on-the-avatar-in-the-upper-right-corner" class="headerlink" title="Click on the avatar in the upper right corner."></a>Click on the avatar in the upper right corner.</h2><p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/Untitled%201.png"></p>
<h2 id="At-this-time-the-profile-page-will-be-displayed-let-us-slide-to-the-bottom-of-the-page-there-is-a-logout-button-click-on-it"><a href="#At-this-time-the-profile-page-will-be-displayed-let-us-slide-to-the-bottom-of-the-page-there-is-a-logout-button-click-on-it" class="headerlink" title="At this time, the profile page will be displayed, let us slide to the bottom of the page, there is a logout button, click on it."></a>At this time, the profile page will be displayed, let us slide to the bottom of the page, there is a logout button, click on it.</h2><p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/Untitled%202.png"></p>
<p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/Untitled%203.png"></p>
<h2 id="Then-return-to-the-top-of-the-page-enter-the-account-password-provided-and-click-the-sign-in-button"><a href="#Then-return-to-the-top-of-the-page-enter-the-account-password-provided-and-click-the-sign-in-button" class="headerlink" title="Then, return to the top of the page, enter the account password provided, and click the sign in button."></a>Then, return to the top of the page, enter the account password provided, and click the sign in button.</h2><p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/Untitled%204.png"></p>
<h2 id="At-this-time-a-security-dialog-box-will-pop-up-let’s-click-on-the-“Other-options”-below-the-blue-button"><a href="#At-this-time-a-security-dialog-box-will-pop-up-let’s-click-on-the-“Other-options”-below-the-blue-button" class="headerlink" title="At this time, a security dialog box will pop up, let’s click on the “Other options” below the blue button."></a>At this time, a security dialog box will pop up, let’s click on the “Other options” below the blue button.</h2><p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/Untitled%205.png"></p>
<h2 id="In-the-“Protect-your-account”-alert-that-pops-up-select-the-second-button-Do-not-upgrade"><a href="#In-the-“Protect-your-account”-alert-that-pops-up-select-the-second-button-Do-not-upgrade" class="headerlink" title="In the “Protect your account” alert that pops up, select the second button(Do not upgrade)"></a>In the “Protect your account” alert that pops up, select the second button(Do not upgrade)</h2><p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/Untitled%206.png"></p>
<h2 id="After-the-login-is-complete-click-the-“Done”-button-on-the-top-right-and-the-store-will-switch-to-the-US-store"><a href="#After-the-login-is-complete-click-the-“Done”-button-on-the-top-right-and-the-store-will-switch-to-the-US-store" class="headerlink" title="After the login is complete, click the “Done” button on the top right, and the store will switch to the US store."></a>After the login is complete, click the “Done” button on the top right, and the store will switch to the US store.</h2><p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/Untitled%207.png"></p>
<h2 id="Search-amp-download-and-enjoy"><a href="#Search-amp-download-and-enjoy" class="headerlink" title="Search &amp; download and enjoy :-)"></a>Search &amp; download and enjoy :-)</h2><p><img src="https://raw.githubusercontent.com/zmlu/zmlu.github.io.assets/master/images/Untitled%208.png"></p>
<blockquote>
<p>After the installation is complete, you can switch back to your Apple ID in the App Store</p>
</blockquote>
<p><strong>ATTENTION! DO NOT log in to the provided account in the settings app, otherwise the device may be locked.</strong></p>
]]></content>
      <categories>
        <category>日常</category>
        <category>技巧</category>
      </categories>
  </entry>
  <entry>
    <title>真正的自律，就是战胜你自己</title>
    <url>/p/ZAB5E7.html</url>
    <content><![CDATA[<p>1</p>
<p>问答平台上有个问题：“你见过最不求上进的人是什么样子”。有个高赞的回答是：为现状焦虑，又没有毅力践行决心改变自己。</p>
<p>三分钟热度，时常憎恶自己不争气，坚持最多的事情就是坚持不下去……本想在有限的生命里体验更多的生活，有的人却只会把同样的日子机械重复很多年。</p>
<p>他们不曾经历过真正的沧桑，却失守了最后一点少年意气；尚未拥有百毒不侵的内心，却提前丧失了热泪盈眶的能力。</p>
<a id="more"></a>

<p>不知你是否发现，很多人空有一颗求上进的心，但在实际生活中，却活得敷衍、潦草、不自律。他们一边痛恨自己总是拖延和懒散，一边又纵容自己，贪图片刻的满足和安逸。</p>
<p>其实，<strong>人这一辈子就是战胜自己的过程。如果你管住了自己，就可以拥有更多的自由。如果你管不好自己，就只能被现实左右</strong>。</p>
<p>2</p>
<p>大概你也曾经历过无数个失败的自律计划。</p>
<p>坚持早起，但第二天实在起不来，就放弃了。坚持读书，但刚读了几页还是忍不住看手机，就放弃了。坚持减肥，刚确立这个信念，但美食一出现又放弃了。</p>
<p>放弃，其实很简单。只要你的思想稍微松动一下，就可以让自己轻松地逃避那些原本你不愿做的事。但想要坚持就太难了，因为你面对的困难和挫折，经受的挑战和诱惑实在太多了。</p>
<p>人与人之间最大的差距就在于自律。优秀的人想要做成一件事，几乎是言出必行，说到即能做到。但很多人虽然也想改变自己，却很难克服自身的惰性。</p>
<p>自律最难的地方，在于它没法一蹴而就。<strong>大多数时刻，你需要反复跟自己做斗争，需要对自己下狠手，需要对自己更严苛，不能给自己丝毫的犹豫和退路。</strong></p>
<p>3</p>
<p>人在什么时刻会意识到自律的重要性？</p>
<p>大概不是在早晨睡到日上三竿时，也不是在深夜吃着炸鸡喝着啤酒时，更不是在一有空闲就盯着手机追剧时，而是当你发现自己的身材越来越胖、生活越来越无聊、人生越来越失去掌控时，才会感受到巨大的压力。</p>
<p>人在什么时刻会意识到自律的好处？</p>
<p>大概不是在寒冷的冬天逼着自己五点起床时，也不是在感到疲惫依旧锻炼身体时，更不是一个人在书房独自读书写作时，而是当你发现自己的身体越来越好、事业越来越有所成、生活越来越有趣时，为此感到无比欣慰。</p>
<p>于不自律的人而言，轻松是暂时的，痛苦却是长久的。于自律的人来说，过程是痛苦的，结果却是令人满意的。</p>
<p>记得网上有一个问题：“高度自律是一种什么体验”。有个回答是“不再被生活拖曳着前进，而是未来变得可控，一切有条不紊，想要的生活触手可及”。</p>
<p>当你觉得管不住自己，想要偷懒、想要懈怠时，想一想自己理想的生活，大概就不会沉迷于安逸享乐。<strong>当你觉得坚持不下去，想要泄气、放弃时，想一想放任的后果，大概就有了自我约束的紧迫感。</strong></p>
<p>4</p>
<p>人人都渴望更出色，但无论做什么都没有捷径，都要做到自律。</p>
<p>成绩比你好的人可能并没有比你更聪明，不过是在一日又一日的枯燥学业中，坚持不断地练题、背书、做笔记。</p>
<p>身体比你好的人可能并不是天生体质好，而是在一天又一天的单调重复中，坚持不断地早睡、早起、多运动。</p>
<p>文采比你好的人可能并不是有特殊的天赋，而是在一年又一年的平淡光阴里坚持不断地读书、沉淀和积累。</p>
<p>许多人之所以觉得自律很难做到，不过是耽于眼前的轻松和安逸，他们抱着及时行乐、得过且过的态度耗费和虚度人生。</p>
<p>曾看过一句话：我相信一万小时定律，但从不相信天上掉馅饼的灵感和坐享其成的成就。做一个自由又自律的人，靠势必实现的决心认真地活着。</p>
<p><strong>自律最大的敌人，不是温暖的被窝、不是好吃的美食、不是好玩的游戏，而是你想要战胜自己的决心、勇气和毅力。</strong></p>
]]></content>
      <categories>
        <category>日常</category>
        <category>摘抄</category>
      </categories>
  </entry>
  <entry>
    <title>运用Live Template加快写代码速度</title>
    <url>/p/1W7RVXA.html</url>
    <content><![CDATA[<p>用IDEA写代码的时候往往会重复性的写一段类似或者一样的代码，让人懊恼不已。<br>IDEA自带了个Live Template功能，不仅有许多自带的快捷写代码的功能，而且还可以自定义属于自己的Live Template。</p>
<a id="more"></a>

<h1 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h1><p>可以自定义一些命令。<br>打开IDEA的设置，找到Live Template，右侧添加，可以先添加一个自己的分组，比如我添加了一个<code>My Live</code>的分组，再添加具体的配置</p>
<p><img src="https://file.moetu.org/images/2020/05/11/WX20200511-1557582xe4befa839a2b5629.png" alt="设置中的Live Template"></p>
<p>变量用<code>$$</code>包裹，IDEA就知道这是个变量了，变量可以在右下角的<code>Edit variables</code>中赋值</p>
<p><img src="https://file.moetu.org/images/2020/05/11/WX20200511-1601432x2ec5b3a8f51453e1.png" alt="Edit variables"></p>
<p>其中，<code>Expression</code>列可以为变量设置一个计算方法，比如<code>className()</code>说明<code>CLASS</code>变量为当前类名，也可以在<code>Default value</code>上指定一个默认值。<br>最后一列如果勾选的话，使用的时候如果这个变量计算出值了则不提示用户进行输入赋值。</p>
<p>以下是我自己使用的一些例子</p>
<h2 id="logger定义"><a href="#logger定义" class="headerlink" title="logger定义"></a>logger定义</h2><p>Template text</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger($CLASS$.class);<br></code></pre></td></tr></table></figure>
<p>Variables</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Expression</th>
<th align="center">Default value</th>
<th align="center">Skip if defined</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>CLASS</code></td>
<td align="center"><code>className()</code></td>
<td align="center"></td>
<td align="center">☑️</td>
</tr>
</tbody></table>
<p>效果</p>
<p><img src="https://file.moetu.org/images/2020/05/11/jlogddfa0f987151730e.gif" alt="logger定义"></p>
<h2 id="返回ModelAndView"><a href="#返回ModelAndView" class="headerlink" title="返回ModelAndView"></a>返回ModelAndView</h2><p>Template text</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/$NAME$.html&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView $NAME$(HttpServletRequest request, HttpServletResponse response) &#123;<br>	logger.info(<span class="hljs-string">&quot;****************$CLASS$:$NAME$ 开始****************&quot;</span>);<br>	logger.info(<span class="hljs-string">&quot;****************$CLASS$:$NAME$ 结束****************&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">&quot;$NAME$/$NAME$&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>Variables</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Expression</th>
<th align="center">Default value</th>
<th align="center">Skip if defined</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>NAME</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>CLASS</code></td>
<td align="center"><code>className()</code></td>
<td align="center"></td>
<td align="center">☑️</td>
</tr>
</tbody></table>
<p>效果</p>
<p><img src="https://file.moetu.org/images/2020/05/11/jmv3bb39f360ca29f14.gif" alt="返回ModelAndView"></p>
<h2 id="返回ModelAndView-有url参数"><a href="#返回ModelAndView-有url参数" class="headerlink" title="返回ModelAndView(有url参数)"></a>返回ModelAndView(有url参数)</h2><p>Template text</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/$NAME$/&#123;$PATHVARIABLE$&#125;.html&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView $NAME$(<span class="hljs-meta">@PathVariable(&quot;$PATHVARIABLE$&quot;)</span> String $PATHVARIABLE$, HttpServletRequest request, HttpServletResponse response) &#123;<br>	logger.info(<span class="hljs-string">&quot;****************$CLASS$:$NAME$ 开始****************&quot;</span>);<br>	logger.info(<span class="hljs-string">&quot;****************$CLASS$:$NAME$ 结束****************&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">&quot;$NAME$/$NAME$&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>Variables</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Expression</th>
<th align="center">Default value</th>
<th align="center">Skip if defined</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>NAME</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>PATHVARIABLE</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>CLASS</code></td>
<td align="center"><code>className()</code></td>
<td align="center"></td>
<td align="center">☑️</td>
</tr>
</tbody></table>
<p>效果</p>
<p><img src="https://file.moetu.org/images/2020/05/11/jmvpfad58786086a271b.gif" alt="返回ModelAndView(有url参数)"></p>
<h2 id="新建Controller"><a href="#新建Controller" class="headerlink" title="新建Controller"></a>新建Controller</h2><p>Template text</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> $<span class="hljs-title">ControllerName</span>$<span class="hljs-title">Controller</span> </span>&#123;<br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger($ControllerName$Controller.class);<br><br>	<span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * $viewName$</span><br><span class="hljs-comment">	 */</span><br>	<span class="hljs-meta">@RequestMapping(&quot;/$viewName$.html&quot;)</span><br>	<span class="hljs-keyword">public</span> ModelAndView $viewName$(HttpServletRequest request, HttpServletResponse response) &#123;<br>		logger.info(<span class="hljs-string">&quot;****************$ControllerName$Controller:$viewName$ 开始****************&quot;</span>);<br>		logger.info(<span class="hljs-string">&quot;****************$ControllerName$Controller:$viewName$ 结束****************&quot;</span>);<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">&quot;$viewName$/$viewName$&quot;</span>);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>Variables</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Expression</th>
<th align="center">Default value</th>
<th align="center">Skip if defined</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>ControllerName</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>viewName</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>效果</p>
<p><img src="https://file.moetu.org/images/2020/05/11/jctlvdd24a5491428c46e.gif" alt="新建Controller"></p>
<h1 id="自带命令"><a href="#自带命令" class="headerlink" title="自带命令"></a>自带命令</h1><p>也可以使用自带命令来模板式地补全语句，如遍历循环语句（for、foreach）、使用 String.format() 包裹一个字符串、使用类型转化包裹一个表达式、根据判（非）空或者其它判别语句生成 if 语句、用 instanceOf 生成分支判断语句等。<br>使用的方式也很简单，就是在一个表达式后按下点号 . ，然后输入一些提示或者在列表中选择一个候选项，常见的候选项下面会给出 GIF 演示。</p>
<h2 id="var-声明"><a href="#var-声明" class="headerlink" title="var 声明"></a>var 声明</h2><p><img src="https://file.moetu.org/images/2020/05/11/20190325105809880cf9e5e79b2d0c9e2.gif" alt="var 声明"></p>
<h2 id="null-判空"><a href="#null-判空" class="headerlink" title="null 判空"></a>null 判空</h2><p><img src="https://file.moetu.org/images/2020/05/11/201903251127382722662ffb5d6bb703d.gif" alt="null 判空"></p>
<h2 id="notnull-判非空"><a href="#notnull-判非空" class="headerlink" title="notnull 判非空"></a>notnull 判非空</h2><p><img src="https://file.moetu.org/images/2020/05/11/20190325112825345d5bc93049265eda2.gif" alt="notnull 判非空"></p>
<h2 id="nn-判非空"><a href="#nn-判非空" class="headerlink" title="nn 判非空"></a>nn 判非空</h2><p><img src="https://file.moetu.org/images/2020/05/11/2019032511285338147f7c09312c94c65.gif" alt="nn 判非空"></p>
<h2 id="for-遍历"><a href="#for-遍历" class="headerlink" title="for 遍历"></a>for 遍历</h2><p><img src="https://file.moetu.org/images/2020/05/11/20190325112942270eab8ea6c5343be88.gif" alt="for 遍历"></p>
<h2 id="fori-带索引的遍历"><a href="#fori-带索引的遍历" class="headerlink" title="fori 带索引的遍历"></a>fori 带索引的遍历</h2><p><img src="https://file.moetu.org/images/2020/05/11/20190325113005808f636bed94c14a7db.gif" alt="fori 带索引的遍历"></p>
<h2 id="not-取反"><a href="#not-取反" class="headerlink" title="not 取反"></a>not 取反</h2><p><img src="https://file.moetu.org/images/2020/05/11/201903251130255555422d0425fb8cd2.gif" alt="not 取反"></p>
<h2 id="if-条件判断"><a href="#if-条件判断" class="headerlink" title="if 条件判断"></a>if 条件判断</h2><p><img src="https://file.moetu.org/images/2020/05/11/201903251130436fb7d2d7090921a58.gif" alt="if 条件判断"></p>
<h2 id="cast-强转"><a href="#cast-强转" class="headerlink" title="cast 强转"></a>cast 强转</h2><p><img src="https://file.moetu.org/images/2020/05/11/20190325113102357ed50cc72af92ad69.gif" alt="cast 强转"></p>
<h2 id="return-返回值"><a href="#return-返回值" class="headerlink" title="return 返回值"></a>return 返回值</h2><p><img src="https://file.moetu.org/images/2020/05/11/20190325113139614f62e07bd5e20fae7.gif" alt="return 返回值"></p>
]]></content>
      <categories>
        <category>日常</category>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>请记住人生中的“三”</title>
    <url>/p/18JYVC6.html</url>
    <content><![CDATA[<p>【男人三大责任】<br>让父母骄傲，<br>让自己的妻子幸福，<br>保持高贵的灵魂</p>
<p>【女人三大责任】<br>激励自己的丈夫，让他飞翔<br>照顾好他的家族<br>做气质非凡，独一无二的自己</p>
<a id="more"></a>

<p>【父母三大责任】<br>成为孩子的榜样，<br>帮孩子建立强大<br>内在力量和外在习惯，<br>帮孩子实现梦想</p>
<p><strong>三样东西毁掉一个人:</strong><br><strong>怒气、傲气、小气</strong></p>
<p>三样东西永不放弃:<br>童真、理想、希望</p>
<p>三样东西最无常:<br>成功、财富、机遇</p>
<p>三样东西最无价:<br>健康、善良、真情</p>
<p>三样东西成就人:<br>天时、地利、人和</p>
<p>三样东西要珍惜:<br>父母、家庭、健康</p>
<p>三样东西助成功：<br>目标、方法、改进</p>
<p>三样东西交朋友:<br>诚信、热情、互助</p>
<p>三样东西把握好:<br>机会、工作、婚姻</p>
<p>三样东西得快乐:<br>知足常乐、助人为乐、自得其乐</p>
]]></content>
      <categories>
        <category>日常</category>
        <category>摘抄</category>
      </categories>
  </entry>
  <entry>
    <title>Netflix各国价格对比(2019)</title>
    <url>/p/2ZVKR9E.html</url>
    <content><![CDATA[<p>先上个简介：<br>Netflix是一家美国公司，在美国、加拿大提供互联网随选流媒体播放，定制DVD、蓝光光碟在线出租业务。该公司成立于1997年，总部位于加利福尼亚州洛斯盖图，1999年开始订阅服务。2009年，该公司可提供多达10万部DVD电影，并有1千万的订户。2007年2月25日，Netflix宣布已经售出第10亿份DVD。</p>
<p>最近入了奈飞，感觉视频挺全，但是价格每个国家都不同，虽然价格不同，但是可以看的视频是同样多的。<br>一下是2019年1月抓取的各个国家的价格数据。方便大家选择哪个国家进行开通续费，仅供参考。</p>
<blockquote>
<p>目前土耳其和阿根廷的价格是最便宜的，但是奈飞增加了这两个地区的限制，如果首次注册账号选择这两个地区，需要用当地手机号接收验证码。不过可以首先开通个别的国家的套餐，然后取消套餐，等待套餐过期了之后，用这两个国家的ip进行续费，就不用需要接受验证码了。</p>
</blockquote>
<a id="more"></a>

<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Basic Plan / RMB</th>
<th align="center">Standard Plan / RMB</th>
<th align="center">Premium Plan / RMB</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Austria</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR11.99 / 90.08</td>
<td align="center">EUR15.99 / 120.13</td>
</tr>
<tr>
<td align="center">Australia</td>
<td align="center">AUD9.99 / 47.28</td>
<td align="center">AUD13.99 / 66.22</td>
<td align="center">AUD17.99 / 85.15</td>
</tr>
<tr>
<td align="center">Belarus</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR11.99 / 90.08</td>
<td align="center">EUR15.99 / 120.13</td>
</tr>
<tr>
<td align="center">Belgium</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR10.99 / 82.56</td>
<td align="center">EUR15.99 / 120.13</td>
</tr>
<tr>
<td align="center">Brazil</td>
<td align="center">BRL21.90 / 37.5</td>
<td align="center">BRL32.90 / 56.34</td>
<td align="center">BRL45.90 / 78.60</td>
</tr>
<tr>
<td align="center">Bulgaria</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR9.99 / 75.05</td>
<td align="center">EUR11.99 / 90.08</td>
</tr>
<tr>
<td align="center">Canada</td>
<td align="center">CAD9.99 / 49.90</td>
<td align="center">CAD13.99 / 69.98</td>
<td align="center">CAD16.99 / 84.99</td>
</tr>
<tr>
<td align="center">Chile</td>
<td align="center">CLP4590 / 45.76</td>
<td align="center">CLP5990 / 59.71</td>
<td align="center">CLP7390 / 73.67</td>
</tr>
<tr>
<td align="center">Croatia</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR9.99 / 75.05</td>
<td align="center">EUR11.99 / 90.08</td>
</tr>
<tr>
<td align="center">Cyprus</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR9.99 / 75.05</td>
<td align="center">EUR11.99 / 90.08</td>
</tr>
<tr>
<td align="center">Czech Republic</td>
<td align="center">Kč199 / 58.07</td>
<td align="center">Kč259 / 75.57</td>
<td align="center">Kč319 / 93.08</td>
</tr>
<tr>
<td align="center">Denmark</td>
<td align="center">DKK79 / 79.43</td>
<td align="center">DKK99 / 99.54</td>
<td align="center">DKK129 / 129.70</td>
</tr>
<tr>
<td align="center">Finland</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR10.99 / 82.56</td>
<td align="center">EUR13.99 / 105.10</td>
</tr>
<tr>
<td align="center">France</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR10.99 / 82.56</td>
<td align="center">EUR13.99 / 105.10</td>
</tr>
<tr>
<td align="center">Germany</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR11.99 / 90.08</td>
<td align="center">EUR15.99 / 120.13</td>
</tr>
<tr>
<td align="center">Greece</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR11.99 / 90.08</td>
<td align="center">EUR15.99 / 120.13</td>
</tr>
<tr>
<td align="center">Hong Kong</td>
<td align="center">HKD63 / 54.14</td>
<td align="center">HKD78 / 67.03</td>
<td align="center">HKD93 / 79.92</td>
</tr>
<tr>
<td align="center">Hungary</td>
<td align="center">Ft2490 / 58.01</td>
<td align="center">Ft3190 / 74.31</td>
<td align="center">FT3990 / 92.95</td>
</tr>
<tr>
<td align="center">Iceland</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR10.99 / 82.56</td>
<td align="center">EUR13.99 / 105.10</td>
</tr>
<tr>
<td align="center">India</td>
<td align="center">INR500 / 48.14</td>
<td align="center">INR650 / 62.58</td>
<td align="center">INR800 / 77.02</td>
</tr>
<tr>
<td align="center">Ireland</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR10.99 / 82.56</td>
<td align="center">EUR13.99 / 105.10</td>
</tr>
<tr>
<td align="center">Isle of Man</td>
<td align="center">GBP5.99 / 52.06</td>
<td align="center">GBP7.99 / 69.45</td>
<td align="center">GBP9.99 / 86.83</td>
</tr>
<tr>
<td align="center">Israel</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">Italy</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR10.99 / 82.56</td>
<td align="center">EUR13.99 / 105.10</td>
</tr>
<tr>
<td align="center">Japan</td>
<td align="center">JPY800 / 48.25</td>
<td align="center">JPY1200 / 72.38</td>
<td align="center">JPY1800 / 108.57</td>
</tr>
<tr>
<td align="center">Lithuania</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR9.99 / 75.05</td>
<td align="center">EUR11.99 / 90.08</td>
</tr>
<tr>
<td align="center">Luxembourg</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR10.99 / 82.56</td>
<td align="center">EUR13.99 / 105.10</td>
</tr>
<tr>
<td align="center">Malaysia</td>
<td align="center">MYR33 / 53.75</td>
<td align="center">MYR42 / 68.41</td>
<td align="center">MYR51 / 83.07</td>
</tr>
<tr>
<td align="center">Mexico</td>
<td align="center">MXN129 / 45.83</td>
<td align="center">MXN169 / 60.05</td>
<td align="center">MXN229 / 81.37</td>
</tr>
<tr>
<td align="center">Moldova</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR9.99 / 75.05</td>
<td align="center">EUR11.99 / 90.08</td>
</tr>
<tr>
<td align="center">Netherlands</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR10.99 / 82.56</td>
<td align="center">EUR13.99 / 105.10</td>
</tr>
<tr>
<td align="center">New Zealand</td>
<td align="center">NZD11.49 / 51.51</td>
<td align="center">NZD14.99 / 67.20</td>
<td align="center">NZD18.49 / 82.89</td>
</tr>
<tr>
<td align="center">Norway</td>
<td align="center">NOK89 / 68.96</td>
<td align="center">NOK109 / 84.46</td>
<td align="center">NOK139 / 107.70</td>
</tr>
<tr>
<td align="center">Poland</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR10.99 / 82.56</td>
<td align="center">EUR13.99 / 105.10</td>
</tr>
<tr>
<td align="center">Portugal</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR10.99 / 82.56</td>
<td align="center">EUR13.99 / 105.10</td>
</tr>
<tr>
<td align="center">Romania</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR9.99 / 75.05</td>
<td align="center">EUR11.99 / 90.08</td>
</tr>
<tr>
<td align="center">Singapore</td>
<td align="center">SGD10.98 / 54.17</td>
<td align="center">SGD13.98 / 68.98</td>
<td align="center">SGD16.98 / 83.78</td>
</tr>
<tr>
<td align="center">Slovakia</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR9.99 / 75.05</td>
<td align="center">EUR11.99 / 90.08</td>
</tr>
<tr>
<td align="center">Slovenia</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR9.99 / 75.05</td>
<td align="center">EUR11.99 / 90.08</td>
</tr>
<tr>
<td align="center">South Africa</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">South Korea</td>
<td align="center">KRW9500 / 55.17</td>
<td align="center">KRW12000 / 69.68</td>
<td align="center">KRW14500 / 84.20</td>
</tr>
<tr>
<td align="center">Spain</td>
<td align="center">EUR7.99 / 60.03</td>
<td align="center">EUR10.99 / 82.56</td>
<td align="center">EUR13.99 / 105.10</td>
</tr>
<tr>
<td align="center">Sweden</td>
<td align="center">SEK89 / 62.96</td>
<td align="center">SEK109 / 77.11</td>
<td align="center">SEK139 / 98.33</td>
</tr>
<tr>
<td align="center">Switzerland</td>
<td align="center">CHF11.90 / 78.52</td>
<td align="center">CHF16.90 / 111.51</td>
<td align="center">CHF21.90 / 144.50</td>
</tr>
<tr>
<td align="center">Taiwan</td>
<td align="center">TWD270 / 58.76</td>
<td align="center">TWD330 / 71.82</td>
<td align="center">TWD39084.88</td>
</tr>
<tr>
<td align="center">Thailand</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">Turkey</td>
<td align="center">BL15.99 / 18.12</td>
<td align="center">BL27.99 / 31.72</td>
<td align="center">BL39.99 / 45.32</td>
</tr>
<tr>
<td align="center">United Kingdom</td>
<td align="center">GBP5.99 / 52.05</td>
<td align="center">GBP7.99 / 69.43</td>
<td align="center">GBP9.99 / 86.81</td>
</tr>
<tr>
<td align="center">United States</td>
<td align="center">USD8.99 / 60.50</td>
<td align="center">USD12.99 / 87.42</td>
<td align="center">USD15.99 / 107.61</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日常</category>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>Netflix</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac提示安装包已损坏的解决方法</title>
    <url>/p/2H0WSE.html</url>
    <content><![CDATA[<p>从网上下载的软件安装包，经常提示：</p>
<blockquote>
<p>xxx已损坏，无法打开。您应该将它移到废纸篓。</p>
</blockquote>
<p>现在总结下解决方法。</p>
<a id="more"></a>

<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>在<strong>系统偏好设置 - 安全与隐私 - 通用标签</strong>中选择来自任何来源选项。</p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>如果没有来自任何来源选项，打开终端执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo spctl --master-disable<br></code></pre></td></tr></table></figure>
<h1 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h1><p>如果方法一和方法二都没有效果，在终端中执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo xattr -r -d com.apple.quarantine /path/to/app<br></code></pre></td></tr></table></figure>
<p>其中 <code>/path/to/app</code> 是app所在的路径，比如XMind ZEN.app就是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo xattr -r -d com.apple.quarantine /Applications/XMind\ ZEN.app<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>日常</category>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
</search>
